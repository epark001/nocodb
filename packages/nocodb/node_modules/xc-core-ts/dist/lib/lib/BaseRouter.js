"use strict";
/* tslint:disable:typedef */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRouter = void 0;
var auto_bind_1 = require("auto-bind");
// import {Handler, any} from 'express';
/**
 * BaseClass for Router files in REST APIs
 *
 * @class
 * @classdesc BaseClass for Router files in REST APIs
 */
var BaseRouter = /** @class */ (function () {
    function BaseRouter() {
        auto_bind_1.default(this);
    }
    BaseRouter.errJson = function (res, code, message) {
        if (code === void 0) { code = 200; }
        return res.status(code).json({ message: message });
    };
    /**
     * @param {Object} app - app context
     */
    // constructor(app: any) {
    //   this.app = app;
    // }
    BaseRouter.prototype.mapRoutes = function () {
        throw new Error(this.constructor.name + ".mapRoutes is not implemented");
    };
    BaseRouter.prototype.catchErr = function (handler) {
        var _this = this;
        return function (req, res, next) {
            Promise.resolve(handler.call(_this, req, res, next)).catch(function (err) {
                res.status(500).json({ msg: err.message });
                // next(err);
            });
        };
    };
    BaseRouter.prototype.errOk = function (res, dto) {
        if (dto !== null || dto !== undefined) {
            res.type('application/json');
            return res.status(200).json(dto);
        }
        else {
            return res.sendStatus(200);
        }
    };
    BaseRouter.prototype.created = function (res) {
        return res.sendStatus(201);
    };
    BaseRouter.prototype.errBadRequest = function (res, message) {
        return BaseRouter.errJson(res, 400, message ? message : 'Bad Request');
    };
    BaseRouter.prototype.errUnauthorized = function (res, message) {
        return BaseRouter.errJson(res, 401, message ? message : 'Unauthorized');
    };
    BaseRouter.prototype.errPaymentRequired = function (res, message) {
        return BaseRouter.errJson(res, 402, message ? message : 'Payment required');
    };
    BaseRouter.prototype.errForbidden = function (res, message) {
        return BaseRouter.errJson(res, 403, message ? message : 'Forbidden');
    };
    BaseRouter.prototype.errNotFound = function (res, message) {
        return BaseRouter.errJson(res, 404, message ? message : 'Not found');
    };
    BaseRouter.prototype.errConflict = function (res, message) {
        return BaseRouter.errJson(res, 409, message ? message : 'Conflict');
    };
    BaseRouter.prototype.errTooMany = function (res, message) {
        return BaseRouter.errJson(res, 429, message ? message : 'Too many requests');
    };
    BaseRouter.prototype.errNotImplemented = function (res, message) {
        return BaseRouter.errJson(res, 501, message ? message : 'Not Implemented');
    };
    BaseRouter.prototype.todo = function (res) {
        return BaseRouter.errJson(res, 400, 'TODO');
    };
    BaseRouter.prototype.errFailed = function (res, error) {
        return res.status(500).json({
            message: error.toString()
        });
    };
    return BaseRouter;
}());
exports.BaseRouter = BaseRouter;
//# sourceMappingURL=BaseRouter.js.map