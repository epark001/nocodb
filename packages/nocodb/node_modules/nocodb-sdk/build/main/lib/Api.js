"use strict";
/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.HttpClient = exports.ContentType = void 0;
const axios_1 = __importDefault(require("axios"));
var ContentType;
(function (ContentType) {
    ContentType["Json"] = "application/json";
    ContentType["FormData"] = "multipart/form-data";
    ContentType["UrlEncoded"] = "application/x-www-form-urlencoded";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
class HttpClient {
    constructor(_a = {}) {
        var { securityWorker, secure, format } = _a, axiosConfig = __rest(_a, ["securityWorker", "secure", "format"]);
        this.securityData = null;
        this.setSecurityData = (data) => {
            this.securityData = data;
        };
        this.request = async (_a) => {
            var { secure, path, type, query, format, wrapped, body } = _a, params = __rest(_a, ["secure", "path", "type", "query", "format", "wrapped", "body"]);
            const secureParams = ((typeof secure === 'boolean' ? secure : this.secure) &&
                this.securityWorker &&
                (await this.securityWorker(this.securityData))) ||
                {};
            const requestParams = this.mergeRequestParams(params, secureParams);
            const responseFormat = (format && this.format) || void 0;
            if (type === ContentType.FormData &&
                body &&
                body !== null &&
                typeof body === 'object') {
                requestParams.headers.common = { Accept: '*/*' };
                requestParams.headers.post = {};
                requestParams.headers.put = {};
                body = this.createFormData(body);
            }
            return this.instance
                .request(Object.assign(Object.assign({}, requestParams), { headers: Object.assign(Object.assign({}, (type && type !== ContentType.FormData
                    ? { 'Content-Type': type }
                    : {})), (requestParams.headers || {})), params: query, responseType: responseFormat, data: body, url: path }))
                .then((response) => {
                if (wrapped)
                    return response;
                return response.data;
            });
        };
        this.instance = axios_1.default.create(Object.assign(Object.assign({}, axiosConfig), { baseURL: axiosConfig.baseURL || 'http://localhost:8080' }));
        this.secure = secure;
        this.format = format;
        this.securityWorker = securityWorker;
    }
    mergeRequestParams(params1, params2) {
        return Object.assign(Object.assign(Object.assign(Object.assign({}, this.instance.defaults), params1), (params2 || {})), { headers: Object.assign(Object.assign(Object.assign({}, (this.instance.defaults.headers || {})), (params1.headers || {})), ((params2 && params2.headers) || {})) });
    }
    createFormData(input) {
        if (input instanceof FormData) {
            return input;
        }
        return Object.keys(input || {}).reduce((formData, key) => {
            const property = input[key];
            if (property instanceof Blob) {
                formData.append(key, property);
            }
            else if (typeof property === 'object' && property !== null) {
                if (Array.isArray(property)) {
                    // eslint-disable-next-line functional/no-loop-statement
                    for (const prop of property) {
                        formData.append(`${key}[]`, prop);
                    }
                }
                else {
                    formData.append(key, JSON.stringify(property));
                }
            }
            else {
                formData.append(key, `${property}`);
            }
            return formData;
        }, new FormData());
    }
}
exports.HttpClient = HttpClient;
/**
 * @title nocodb
 * @version 1.0
 * @baseUrl http://localhost:8080
 *
 * NocoDB API Documentation
 */
class Api extends HttpClient {
    constructor() {
        super(...arguments);
        this.auth = {
            /**
         * @description Create a new user with provided email and password and first user is marked as super admin.
         *
         * @tags Auth
         * @name Signup
         * @summary Signup
         * @request POST:/api/v1/auth/user/signup
         * @response `200` `{
          \**
           * The signed JWT token for information exchange
           * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6IndAbm9jb2RiLmNvbSIsImZpcnN0bmFtZSI6bnVsbCwibGFzdG5hbWUiOm51bGwsImlkIjoidXNfYjN4bzJpNDRueDV5OWwiLCJyb2xlcyI6Im9yZy1sZXZlbC1jcmVhdG9yLHN1cGVyIiwidG9rZW5fdmVyc2lvbiI6ImJmMTc3ZGUzYjk3YjAzMjY4YjU0NGZmMjMzNGU5YjFhMGUzYzgxM2NiYzliOTJkYWMwYmM5NTRiNmUzN2ZjMTJjYmFkNDM2NmIwYzExZTdjIiwiaWF0IjoxNjc4MDc4NDMyLCJleHAiOjE2NzgxMTQ0MzJ9.gzwp_svZlbA5PV_eawYV-9UFjZVjniy-tCDce16xrkI
           *\
          token?: string,
        
        }` OK
         * @response `400` `{
          msg?: string,
        
        }` Bad Request
         */
            signup: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/user/signup`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Clear refresh token from the database and cookie.
         *
         * @tags Auth
         * @name Signout
         * @summary Signout
         * @request POST:/api/v1/auth/user/signout
         * @response `200` `{
          \**
           * Success Message
           * @example Signed out successfully
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            signout: (params = {}) => this.request(Object.assign({ path: `/api/v1/auth/user/signout`, method: 'POST', format: 'json' }, params)),
            /**
         * @description Authenticate existing user with their email and password. Successful login will return a JWT access-token.
         *
         * @tags Auth
         * @name Signin
         * @summary Signin
         * @request POST:/api/v1/auth/user/signin
         * @response `200` `{
          \**
           * The signed JWT token for information exchange
           * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6IndAbm9jb2RiLmNvbSIsImZpcnN0bmFtZSI6bnVsbCwibGFzdG5hbWUiOm51bGwsImlkIjoidXNfYjN4bzJpNDRueDV5OWwiLCJyb2xlcyI6Im9yZy1sZXZlbC1jcmVhdG9yLHN1cGVyIiwidG9rZW5fdmVyc2lvbiI6ImJmMTc3ZGUzYjk3YjAzMjY4YjU0NGZmMjMzNGU5YjFhMGUzYzgxM2NiYzliOTJkYWMwYmM5NTRiNmUzN2ZjMTJjYmFkNDM2NmIwYzExZTdjIiwiaWF0IjoxNjc4MDc4NDMyLCJleHAiOjE2NzgxMTQ0MzJ9.gzwp_svZlbA5PV_eawYV-9UFjZVjniy-tCDce16xrkI
           *\
          token?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            signin: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/user/signin`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Returns authenticated user info
         *
         * @tags Auth
         * @name Me
         * @summary Get User Info
         * @request GET:/api/v1/auth/user/me
         * @response `200` `UserInfoType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            me: (query, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/user/me`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Emails user with a reset url.
         *
         * @tags Auth
         * @name PasswordForgot
         * @summary Forget Password
         * @request POST:/api/v1/auth/password/forgot
         * @response `200` `{
          \**
           * Success Message
           * @example Please check your email to reset the password
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            passwordForgot: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/password/forgot`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Change password of authenticated user with a new one.
         *
         * @tags Auth
         * @name PasswordChange
         * @summary Change Password
         * @request POST:/api/v1/auth/password/change
         * @response `200` `{
          \** Success Message *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            passwordChange: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/password/change`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Validate password reset url token.
         *
         * @tags Auth
         * @name PasswordResetTokenValidate
         * @summary Verify Reset Token
         * @request POST:/api/v1/auth/token/validate/{token}
         * @response `200` `{
          \**
           * Success Message
           * @example Token has been validated successfully
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            passwordResetTokenValidate: (token, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/token/validate/${token}`, method: 'POST', format: 'json' }, params)),
            /**
         * @description Api for verifying email where token need to be passed which is shared to user email.
         *
         * @tags Auth
         * @name EmailValidate
         * @summary Verify Email
         * @request POST:/api/v1/auth/email/validate/{token}
         * @response `200` `{
          \**
           * Success Message
           * @example Email has been verified successfully
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            emailValidate: (token, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/email/validate/${token}`, method: 'POST', format: 'json' }, params)),
            /**
         * @description Update user password to new by using reset token.
         *
         * @tags Auth
         * @name PasswordReset
         * @summary Reset Password
         * @request POST:/api/v1/auth/password/reset/{token}
         * @response `200` `{
          \**
           * Success Message
           * @example Password has been reset successfully
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            passwordReset: (token, data, params = {}) => this.request(Object.assign({ path: `/api/v1/auth/password/reset/${token}`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Regenerate user refresh token
         *
         * @tags Auth
         * @name TokenRefresh
         * @summary Refresh Token
         * @request POST:/api/v1/auth/token/refresh
         * @response `200` `{
          \**
           * New access token for user
           * @example 96751db2d53fb834382b682268874a2ea9ee610e4d904e688d1513f11d3c30d62d36d9e05dec0d63
           *\
          token?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            tokenRefresh: (params = {}) => this.request(Object.assign({ path: `/api/v1/auth/token/refresh`, method: 'POST', format: 'json' }, params)),
            /**
         * @description List all users in the given project.
         *
         * @tags Auth
         * @name ProjectUserList
         * @summary List Project Users
         * @request GET:/api/v1/db/meta/projects/{projectId}/users
         * @response `200` `{
          users?: {
          list: (UserType)[],
          \** Model for Paginated *\
          pageInfo: PaginatedType,
        
        },
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            projectUserList: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/users`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a user and add it to the given project
         *
         * @tags Auth
         * @name ProjectUserAdd
         * @summary Create Project User
         * @request POST:/api/v1/db/meta/projects/{projectId}/users
         * @response `200` `{
          \**
           * Success Message for inviting single email
           * @example The user has been invited successfully
           *\
          msg?: string,
          \** @example 8354ddba-a769-4d64-8397-eccb2e2b3c06 *\
          invite_token?: string,
          error?: ({
          \** @example w@nocodb.com *\
          email?: string,
          \** @example <ERROR_MESSAGE> *\
          error?: string,
        
        })[],
          \** @example w@nocodb.com *\
          email?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            projectUserAdd: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/users`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update a given user in a given project. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Auth
         * @name ProjectUserUpdate
         * @summary Update Project User
         * @request PATCH:/api/v1/db/meta/projects/{projectId}/users/{userId}
         * @response `200` `{
          \**
           * Success Message
           * @example The user has been updated successfully
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            projectUserUpdate: (projectId, userId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/users/${userId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete a given user in a given project. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Auth
         * @name ProjectUserRemove
         * @summary Delete Project User
         * @request DELETE:/api/v1/db/meta/projects/{projectId}/users/{userId}
         * @response `200` `{
          \**
           * Success Message
           * @example The user has been updated successfully
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            projectUserRemove: (projectId, userId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/users/${userId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Resend Invitation to a specific user
         *
         * @tags Auth
         * @name ProjectUserResendInvite
         * @summary Resend User Invitation
         * @request POST:/api/v1/db/meta/projects/{projectId}/users/{userId}/resend-invite
         * @response `200` `{
          \**
           * Success Message
           * @example The invitation has been sent to the user
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            projectUserResendInvite: (projectId, userId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/users/${userId}/resend-invite`, method: 'POST', format: 'json' }, params)),
        };
        this.orgTokens = {
            /**
         * @description List all organisation API tokens.  Access with API tokens will be blocked.
         *
         * @tags Org Tokens
         * @name List
         * @summary List Organisation API Tokens
         * @request GET:/api/v1/tokens
         * @response `200` `ApiTokenListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (params = {}) => this.request(Object.assign({ path: `/api/v1/tokens`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Creat an organisation API token. Access with API tokens will be blocked.
         *
         * @tags Org Tokens
         * @name Create
         * @summary Create Organisation API Token
         * @request POST:/api/v1/tokens
         * @response `200` `ApiTokenType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/tokens`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete an organisation API token. Access with API tokens will be blocked.
         *
         * @tags Org Tokens
         * @name Delete
         * @summary Delete Organisation API Tokens
         * @request DELETE:/api/v1/tokens/{token}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (token, params = {}) => this.request(Object.assign({ path: `/api/v1/tokens/${token}`, method: 'DELETE', format: 'json' }, params)),
        };
        this.orgLicense = {
            /**
         * @description Get the application license key. Exclusive for super admin.
         *
         * @tags Org License
         * @name Get
         * @summary Get App License
         * @request GET:/api/v1/license
         * @response `200` `{
          \** Application license key *\
          key?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            get: (params = {}) => this.request(Object.assign({ path: `/api/v1/license`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Set the application license key. Exclusive for super admin.
         *
         * @tags Org License
         * @name Set
         * @summary Create App License
         * @request POST:/api/v1/license
         * @response `200` `{
          \** @example The license key has been saved *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            set: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/license`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
        };
        this.orgAppSettings = {
            /**
         * @description Get the application settings. Exclusive for super admin.
         *
         * @tags Org App Settings
         * @name Get
         * @summary Get App Settings
         * @request GET:/api/v1/app-settings
         * @response `200` `{
          \**
           * Status of invite only signup
           * @example true
           *\
          invite_only_signup?: boolean,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            get: (params = {}) => this.request(Object.assign({ path: `/api/v1/app-settings`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the application settings. Exclusive for super admin.
         *
         * @tags Org App Settings
         * @name Set
         * @summary Create App Settings
         * @request POST:/api/v1/app-settings
         * @response `200` `{
          \** @example The app settings have been saved *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            set: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/app-settings`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
        };
        this.orgUsers = {
            /**
         * @description List all organisation users. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Org Users
         * @name List
         * @summary List Organisation Users
         * @request GET:/api/v1/users
         * @response `200` `UserListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (params = {}) => this.request(Object.assign({ path: `/api/v1/users`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create an organisation user. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Org Users
         * @name Add
         * @summary Create Organisation User
         * @request POST:/api/v1/users
         * @response `200` `{
          \** Invite Token *\
          invite_token?: string,
          \**
           * User email
           * @example user@example.com
           *\
          email?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            add: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/users`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update an organisation user by User ID. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Org Users
         * @name Update
         * @summary Update Organisation User
         * @request PATCH:/api/v1/users/{userId}
         * @response `200` `{
          \** @example The user has been updated successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (userId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete an organisation user by User ID. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Org Users
         * @name Delete
         * @summary Delete Organisation User
         * @request DELETE:/api/v1/users/{userId}
         * @response `200` `{
          \**
           * Sucess Message
           * @example The user has been deleted successfully
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (userId, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}`, method: 'DELETE', format: 'json' }, params)),
            /**
             * @description Organisation User GetByUsername
             *
             * @tags Org users
             * @name GetByUsername
             * @summary Organisation User GetByUsername
             * @request GET:/api/v1/users/{username}
             * @response `200` `UserType` OK
             */
            getByUsername: (username, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${username}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Resend Invitation to a specific user. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Org Users
         * @name ResendInvite
         * @summary Invite Organisation User
         * @request POST:/api/v1/users/{userId}/resend-invite
         * @response `200` `{
          \**
           * Success Message
           * @example The invitation has been sent to the target user
           *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            resendInvite: (userId, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/resend-invite`, method: 'POST', format: 'json' }, params)),
            /**
             * @description Create Organisation User Profile
             *
             * @tags Org users
             * @name ProfileCreate
             * @summary Organisation User Profile - Create
             * @request POST:/api/v1/users/{userId}/profile
             * @response `200` `void` OK
             */
            profileCreate: (userId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/profile`, method: 'POST', body: data, type: ContentType.Json }, params)),
            /**
             * @description Get Organisation User Profile
             *
             * @tags Org users
             * @name ProfileGet
             * @summary Organisation User Profile - Get
             * @request GET:/api/v1/users/{userId}/profile
             * @response `200` `void` OK
             */
            profileGet: (userId, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/profile`, method: 'GET' }, params)),
            /**
             * @description Update Organisation User Profile
             *
             * @tags Org users
             * @name ProfileUpdate
             * @request PATCH:/api/v1/users/{userId}/profile
             * @response `200` `void` OK
             */
            profileUpdate: (userId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/profile`, method: 'PATCH', body: data, type: ContentType.Json }, params)),
            /**
             * @description Create Organisation User Follower Relationship (Follow)
             *
             * @tags Org users
             * @name FollowerCreate
             * @summary Organisation User Follower - Create
             * @request POST:/api/v1/users/{userId}/follower
             * @response `200` `void` OK
             */
            followerCreate: (userId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/follower`, method: 'POST', body: data, type: ContentType.Json }, params)),
            /**
             * @description List Organisation User Followers
             *
             * @tags Org users
             * @name FollowerList
             * @summary Organisation User Follower - List
             * @request GET:/api/v1/users/{userId}/follower
             * @response `200` `void` OK
             */
            followerList: (userId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/follower`, method: 'GET', body: data, type: ContentType.Json }, params)),
            /**
             * @description Delete Organisation User Follower Relationship (Unfollow)
             *
             * @tags Org users
             * @name FollowerDelete
             * @summary Organisation User Follower - Delete
             * @request DELETE:/api/v1/users/{userId}/follower
             * @response `200` `void` OK
             */
            followerDelete: (userId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/follower`, method: 'DELETE', body: data, type: ContentType.Json }, params)),
            /**
             * @description List Organisation User Following
             *
             * @tags Org users
             * @name FollowingList
             * @summary Organisation User Following - List
             * @request GET:/api/v1/users/{userId}/following
             * @response `200` `void` OK
             */
            followingList: (userId, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/following`, method: 'GET' }, params)),
            /**
             * @description Check if Organisation User is following someone
             *
             * @tags Org users
             * @name IsFollowing
             * @summary Organisation User IsFollowing
             * @request GET:/api/v1/users/{userId}/isFollowing/{followerId}
             * @response `200` `void` OK
             */
            isFollowing: (userId, followerId, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/isFollowing/${followerId}`, method: 'GET' }, params)),
            /**
         * @description Generate Password Reset Token for Organisation User. Exclusive for Super Admin. Access with API Tokens will be blocked.
         *
         * @tags Org Users
         * @name GeneratePasswordResetToken
         * @summary Generate Organisation User Password Reset Token
         * @request POST:/api/v1/users/{userId}/generate-reset-url
         * @response `200` `{
          \** Password Reset Token for the user *\
          reset_password_token?: string,
          \** Password Reset URL for the user *\
          reset_password_url?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            generatePasswordResetToken: (userId, params = {}) => this.request(Object.assign({ path: `/api/v1/users/${userId}/generate-reset-url`, method: 'POST', format: 'json' }, params)),
        };
        this.project = {
            /**
         * @description Get info such as node version, arch, platform, is docker, rootdb and package version of a given project
         *
         * @tags Project
         * @name MetaGet
         * @summary Get Project info
         * @request GET:/api/v1/db/meta/projects/{projectId}/info
         * @response `200` `{
          \**
           * Node version
           * @example v12.16.1
           *\
          Node?: string,
          \**
           * Architecture type
           * @example x64
           *\
          Arch?: string,
          \**
           * Platform type
           * @example linux
           *\
          Platform?: string,
          \**
           * Is docker
           * @example false
           *\
          Docker?: boolean,
          \**
           * Database type
           * @example postgres
           *\
          Database?: string,
          \**
           * Is project on rootdb
           * @example false
           *\
          ProjectOnRootDB?: boolean,
          \**
           * Root database type
           * @example postgres
           *\
          RootDB?: string,
          \**
           * Package version
           * @example 1.0.0
           *\
          PackageVersion?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            metaGet: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/info`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Hide / show views based on user role
         *
         * @tags Project
         * @name ModelVisibilityList
         * @summary Get UI ACL
         * @request GET:/api/v1/db/meta/projects/{projectId}/visibility-rules
         * @response `200` `(any)[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            modelVisibilityList: (projectId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/visibility-rules`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Hide / show views based on user role
         *
         * @tags Project
         * @name ModelVisibilitySet
         * @summary Create UI ACL
         * @request POST:/api/v1/db/meta/projects/{projectId}/visibility-rules
         * @response `200` `{
          \** @example UI ACL has been created successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            modelVisibilitySet: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/visibility-rules`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description List all project meta data
         *
         * @tags Project
         * @name List
         * @summary List Projects
         * @request GET:/api/v1/db/meta/projects/
         * @response `200` `ProjectListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a new project
         *
         * @tags Project
         * @name Create
         * @summary Create Project
         * @request POST:/api/v1/db/meta/projects/
         * @response `200` `ProjectType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Duplicate a project
         *
         * @tags Project
         * @name BaseDuplicate
         * @summary Duplicate Project Base
         * @request POST:/api/v1/db/meta/duplicate/{projectId}/{baseId}
         * @response `200` `{
          name?: string,
          id?: string,
          project_id?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            baseDuplicate: (projectId, data, baseId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/duplicate/${projectId}/${baseId}`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Duplicate a project
         *
         * @tags Project
         * @name Duplicate
         * @summary Duplicate Project
         * @request POST:/api/v1/db/meta/duplicate/{projectId}
         * @response `200` `{
          name?: string,
          id?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            duplicate: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/duplicate/${projectId}`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the info of a given project
         *
         * @tags Project
         * @name Read
         * @summary Get Project
         * @request GET:/api/v1/db/meta/projects/{projectId}
         * @response `200` `ProjectType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Delete the given project
         *
         * @tags Project
         * @name Delete
         * @summary Delete Project
         * @request DELETE:/api/v1/db/meta/projects/{projectId}
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Update the given project
         *
         * @tags Project
         * @name Update
         * @summary Update Project
         * @request PATCH:/api/v1/db/meta/projects/{projectId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
             * No description
             *
             * @tags Project
             * @name UserMetaUpdate
             * @summary Project user meta update
             * @request PATCH:/api/v1/db/meta/projects/{projectId}/user
             * @response `200` `void` OK
             */
            userMetaUpdate: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/user`, method: 'PATCH', body: data, type: ContentType.Json }, params)),
            /**
         * @description Get Project Shared Base
         *
         * @tags Project
         * @name SharedBaseGet
         * @summary Get Project Shared Base
         * @request GET:/api/v1/db/meta/projects/{projectId}/shared
         * @response `200` `{
          \**
           * @format uuid
           * @example a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
           *\
          uuid?: string,
          \** @format uri *\
          url?: string,
          \** @example viewer *\
          roles?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            sharedBaseGet: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/shared`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Delete Project Shared Base
         *
         * @tags Project
         * @name SharedBaseDisable
         * @summary Delete Project Shared Base
         * @request DELETE:/api/v1/db/meta/projects/{projectId}/shared
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            sharedBaseDisable: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/shared`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Create Project Shared Base
         *
         * @tags Project
         * @name SharedBaseCreate
         * @summary Create Project Shared Base
         * @request POST:/api/v1/db/meta/projects/{projectId}/shared
         * @response `200` `{
          \** Model for StringOrNull *\
          uuid?: StringOrNullType,
          \** Model for StringOrNull *\
          roles?: StringOrNullType,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            sharedBaseCreate: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/shared`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update Project Shared Base
         *
         * @tags Project
         * @name SharedBaseUpdate
         * @summary Update Project Shared Base
         * @request PATCH:/api/v1/db/meta/projects/{projectId}/shared
         * @response `200` `{
          \**
           * @format uuid
           * @example a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
           *\
          uuid?: string,
          \** @format uri *\
          url?: string,
          \** @example viewer *\
          roles?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            sharedBaseUpdate: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/shared`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Calculate the Project Cost
         *
         * @tags Project
         * @name Cost
         * @summary Project Cost
         * @request GET:/api/v1/db/meta/projects/{projectId}/cost
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            cost: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/cost`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Synchronise the meta data difference between NC_DB and external data sources
         *
         * @tags Project
         * @name MetaDiffSync
         * @summary Sync Meta
         * @request POST:/api/v1/db/meta/projects/{projectId}/meta-diff
         * @response `200` `{
          \** @example The meta has been synchronized successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            metaDiffSync: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/meta-diff`, method: 'POST', format: 'json' }, params)),
            /**
         * @description Get the meta data difference between NC_DB and external data sources
         *
         * @tags Project
         * @name MetaDiffGet
         * @summary Meta Diff
         * @request GET:/api/v1/db/meta/projects/{projectId}/meta-diff
         * @response `200` `({
          \**
           * Table Name
           * @example Table 1
           *\
          table_name?: string,
          \**
           * Base ID
           * @example ds_rrplkgy0pq1f3c
           *\
          base_id?: string,
          \**
           * Change Type
           * @example table
           *\
          type?: string,
          \** Detected Changes *\
          detectedChanges?: (object)[],
        
        })[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            metaDiffGet: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/meta-diff`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Check if a project contains empty and null filters. Used in `Show NULL and EMPTY in Filter` in Project Setting.
         *
         * @tags Project
         * @name HasEmptyOrNullFilters
         * @summary List Empty & Null Filter
         * @request GET:/api/v1/db/meta/projects/{projectId}/has-empty-or-null-filters
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            hasEmptyOrNullFilters: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/has-empty-or-null-filters`, method: 'GET', format: 'json' }, params)),
            /**
         * @description List all audit data in the given project
         *
         * @tags Project
         * @name AuditList
         * @summary List Audits in Project
         * @request GET:/api/v1/db/meta/projects/{projectId}/audits
         * @response `200` `{
          list: (AuditType)[],
          \** Model for Paginated *\
          pageInfo: PaginatedType,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            auditList: (projectId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/audits`, method: 'GET', query: query, format: 'json' }, params)),
        };
        this.base = {
            /**
         * @description Get the base details of a given project
         *
         * @tags Base
         * @name Read
         * @summary Get Base
         * @request GET:/api/v1/db/meta/projects/{projectId}/bases/{baseId}
         * @response `200` `BaseType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (projectId, baseId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/${baseId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Delete the base details of a given project
         *
         * @tags Base
         * @name Delete
         * @summary Delete Base
         * @request DELETE:/api/v1/db/meta/projects/{projectId}/bases/{baseId}
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (projectId, baseId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/${baseId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Update the base details of a given project
         *
         * @tags Base
         * @name Update
         * @summary Update Base
         * @request PATCH:/api/v1/db/meta/projects/{projectId}/bases/{baseId}
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (projectId, baseId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/${baseId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
             * No description
             *
             * @tags Base
             * @name CreateSqlView
             * @summary Create sql view
             * @request POST:/api/v1/db/meta/projects/:projectId/bases/:baseId/sqlView
             * @response `200` `object` OK
             */
            createSqlView: (projectId, baseId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/${baseId}/sqlView`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get project base list
         *
         * @tags Base
         * @name List
         * @summary List Bases
         * @request GET:/api/v1/db/meta/projects/{projectId}/bases/
         * @response `200` `BaseListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a new base on a given project
         *
         * @tags Base
         * @name Create
         * @summary Create Base
         * @request POST:/api/v1/db/meta/projects/{projectId}/bases/
         * @response `200` `BaseType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
             * No description
             *
             * @tags Base
             * @name ShareErd
             * @summary share ERD view
             * @request POST:/api/v1/db/meta/projects/{projectId}/bases/{baseId}/share/erd
             * @response `200` `BaseType` OK
             */
            shareErd: (projectId, baseId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/${baseId}/share/erd`, method: 'POST', format: 'json' }, params)),
            /**
             * No description
             *
             * @tags Base
             * @name DisableShareErd
             * @request DELETE:/api/v1/db/meta/projects/{projectId}/bases/{baseId}/share/erd
             * @response `200` `void` OK
             */
            disableShareErd: (projectId, baseId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/bases/${baseId}/share/erd`, method: 'DELETE' }, params)),
            /**
         * @description List all tables in a given Project and Base
         *
         * @tags Base
         * @name TableList
         * @summary List Tables
         * @request GET:/api/v1/db/meta/projects/{projectId}/{baseId}/tables
         * @response `200` `TableListType`
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            tableList: (projectId, baseId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/${baseId}/tables`, method: 'GET', query: query }, params)),
            /**
         * @description Create a new table in a given Project and Base
         *
         * @tags Base
         * @name TableCreate
         * @summary Create Table
         * @request POST:/api/v1/db/meta/projects/{projectId}/{baseId}/tables
         * @response `200` `TableType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            tableCreate: (projectId, baseId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/${baseId}/tables`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Synchronise the meta data difference between NC_DB and external data sources in a given Base
         *
         * @tags Base
         * @name MetaDiffSync
         * @summary Synchronise Base Meta
         * @request POST:/api/v1/db/meta/projects/{projectId}/meta-diff/{baseId}
         * @response `200` `{
          \** @example The base meta has been synchronized successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            metaDiffSync: (projectId, baseId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/meta-diff/${baseId}`, method: 'POST', format: 'json' }, params)),
            /**
         * @description Get the meta data difference between NC_DB and external data sources in a given Base
         *
         * @tags Base
         * @name MetaDiffGet
         * @summary Base Meta Diff
         * @request GET:/api/v1/db/meta/projects/{projectId}/meta-diff/{baseId}
         * @response `200` `({
          \**
           * Table Name
           * @example Table 1
           *\
          table_name?: string,
          \**
           * Base ID
           * @example ds_rrplkgy0pq1f3c
           *\
          base_id?: string,
          \**
           * Change Type
           * @example table
           *\
          type?: string,
          \** Detected Changes *\
          detectedChanges?: (object)[],
        
        })[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            metaDiffGet: (projectId, baseId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/meta-diff/${baseId}`, method: 'GET', format: 'json' }, params)),
        };
        this.dbTable = {
            /**
         * @description Create a new table in a given project
         *
         * @tags DB Table
         * @name Create
         * @summary Create Table
         * @request POST:/api/v1/db/meta/projects/{projectId}/tables
         * @response `200` `TableType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/tables`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description List all tables in a given project
         *
         * @tags DB Table
         * @name List
         * @summary List Tables
         * @request GET:/api/v1/db/meta/projects/{projectId}/tables
         * @response `200` `TableListType`
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (projectId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/tables`, method: 'GET', query: query }, params)),
            /**
         * @description Read the table meta data by the given table ID
         *
         * @tags DB Table
         * @name Read
         * @summary Read Table
         * @request GET:/api/v1/db/meta/tables/{tableId}
         * @response `200` `TableType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (tableId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the table meta data by the given table ID
         *
         * @tags DB Table
         * @name Update
         * @summary Update Table
         * @request PATCH:/api/v1/db/meta/tables/{tableId}
         * @response `200` `{
          \** @example The table has been updated successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the table meta data by the given table ID
         *
         * @tags DB Table
         * @name Delete
         * @summary Delete Table
         * @request DELETE:/api/v1/db/meta/tables/{tableId}
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (tableId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Duplicate a table
         *
         * @tags DB Table
         * @name Duplicate
         * @summary Duplicate Table
         * @request POST:/api/v1/db/meta/duplicate/{projectId}/table/{tableId}
         * @response `200` `{
          name?: string,
          id?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            duplicate: (projectId, tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/duplicate/${projectId}/table/${tableId}`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update the order of the given Table
         *
         * @tags DB Table
         * @name Reorder
         * @summary Reorder Table
         * @request POST:/api/v1/db/meta/tables/{tableId}/reorder
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            reorder: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/reorder`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
        };
        this.dbTableColumn = {
            /**
         * @description Create a new column in a given Table
         *
         * @tags DB Table Column
         * @name Create
         * @summary Create Column
         * @request POST:/api/v1/db/meta/tables/{tableId}/columns
         * @response `200` `void` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/columns`, method: 'POST', body: data, type: ContentType.Json }, params)),
            /**
         * @description Update the existing column by the given column ID
         *
         * @tags DB Table Column
         * @name Update
         * @summary Update Column
         * @request PATCH:/api/v1/db/meta/columns/{columnId}
         * @response `200` `ColumnType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (columnId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/columns/${columnId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the existing column by the given column ID
         *
         * @tags DB Table Column
         * @name Delete
         * @summary Delete Column
         * @request DELETE:/api/v1/db/meta/columns/{columnId}
         * @response `200` `void` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (columnId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/columns/${columnId}`, method: 'DELETE' }, params)),
            /**
         * @description Get the existing column by the given column ID
         *
         * @tags DB Table Column
         * @name Get
         * @summary Get Column
         * @request GET:/api/v1/db/meta/columns/{columnId}
         * @response `200` `void` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            get: (columnId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/columns/${columnId}`, method: 'GET' }, params)),
            /**
         * @description Set a primary value on a given column
         *
         * @tags DB Table Column
         * @name PrimaryColumnSet
         * @summary Create Primary Value
         * @request POST:/api/v1/db/meta/columns/{columnId}/primary
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            primaryColumnSet: (columnId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/columns/${columnId}/primary`, method: 'POST', format: 'json' }, params)),
            /**
         * @description Get columns hash for table
         *
         * @tags DB Table Column
         * @name Hash
         * @summary Get columns hash for table
         * @request GET:/api/v1/db/meta/tables/{tableId}/columns/hash
         * @response `200` `{
          \** Columns hash *\
          hash?: string,
        
        }` OK
         */
            hash: (tableId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/columns/hash`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Bulk create-update-delete columns
         *
         * @tags DB Table Column
         * @name Bulk
         * @summary Bulk create-update-delete columns
         * @request POST:/api/v1/db/meta/tables/{tableId}/columns/bulk
         * @response `200` `{
          failedOps?: (any)[],
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            bulk: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/columns/bulk`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
        };
        this.dbView = {
            /**
         * @description List all views in a given Table.
         *
         * @tags DB View
         * @name List
         * @summary List Views
         * @request GET:/api/v1/db/meta/tables/{tableId}/views
         * @response `200` `ViewListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (tableId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/views`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the view with the given view Id.
         *
         * @tags DB View
         * @name Update
         * @summary Update View
         * @request PATCH:/api/v1/db/meta/views/{viewId}
         * @response `200` `ViewType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (viewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the view with the given view Id.
         *
         * @tags DB View
         * @name Delete
         * @summary Delete View
         * @request DELETE:/api/v1/db/meta/views/{viewId}
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (viewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Show All Columns in a given View
         *
         * @tags DB View
         * @name ShowAllColumn
         * @summary Show All Columns In View
         * @request POST:/api/v1/db/meta/views/{viewId}/show-all
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            showAllColumn: (viewId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/show-all`, method: 'POST', query: query, format: 'json' }, params)),
            /**
         * @description Hide All Columns in a given View
         *
         * @tags DB View
         * @name HideAllColumn
         * @summary Hide All Columns In View
         * @request POST:/api/v1/db/meta/views/{viewId}/hide-all
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            hideAllColumn: (viewId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/hide-all`, method: 'POST', query: query, format: 'json' }, params)),
            /**
         * @description Create a new grid view in a given Table
         *
         * @tags DB View
         * @name GridCreate
         * @summary Create Grid View
         * @request POST:/api/v1/db/meta/tables/{tableId}/grids
         * @response `200` `ViewType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            gridCreate: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/grids`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Create a new form view in a given Table
         *
         * @tags DB View
         * @name FormCreate
         * @summary Create Form View
         * @request POST:/api/v1/db/meta/tables/{tableId}/forms
         * @response `200` `ViewType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            formCreate: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/forms`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update the form data by Form ID
         *
         * @tags DB View
         * @name FormUpdate
         * @summary Update Form View
         * @request PATCH:/api/v1/db/meta/forms/{formViewId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            formUpdate: (formViewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/forms/${formViewId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the form data by Form ID
         *
         * @tags DB View
         * @name FormRead
         * @summary Get Form
         * @request GET:/api/v1/db/meta/forms/{formViewId}
         * @response `200` `FormType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            formRead: (formViewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/forms/${formViewId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the form column(s) by Form View Column ID
         *
         * @tags DB View
         * @name FormColumnUpdate
         * @summary Update Form Column
         * @request PATCH:/api/v1/db/meta/form-columns/{formViewColumnId}
         * @response `200` `FormColumnReqType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            formColumnUpdate: (formViewColumnId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/form-columns/${formViewColumnId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update Grid View
         *
         * @tags DB View
         * @name GridUpdate
         * @summary Update Grid View
         * @request PATCH:/api/v1/db/meta/grids/{viewId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            gridUpdate: (viewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/grids/${viewId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description List all columns in the given Grid
         *
         * @tags DB View
         * @name GridColumnsList
         * @summary List Grid Columns
         * @request GET:/api/v1/db/meta/grids/{gridId}/grid-columns
         * @response `200` `(GridColumnType)[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            gridColumnsList: (gridId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/grids/${gridId}/grid-columns`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update grid column(s) in the given Grid
         *
         * @tags DB View
         * @name GridColumnUpdate
         * @summary Update Grid Column
         * @request PATCH:/api/v1/db/meta/grid-columns/{columnId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            gridColumnUpdate: (columnId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/grid-columns/${columnId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * No description
         *
         * @tags DB View
         * @name GalleryCreate
         * @summary Create Gallery View
         * @request POST:/api/v1/db/meta/tables/{tableId}/galleries
         * @response `200` `ViewType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            galleryCreate: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/galleries`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update the Gallery View data with Gallery ID
         *
         * @tags DB View
         * @name GalleryUpdate
         * @summary Update Gallery View
         * @request PATCH:/api/v1/db/meta/galleries/{galleryViewId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            galleryUpdate: (galleryViewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/galleries/${galleryViewId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the Gallery View data with Gallery ID
         *
         * @tags DB View
         * @name GalleryRead
         * @summary Get Gallery View
         * @request GET:/api/v1/db/meta/galleries/{galleryViewId}
         * @response `200` `GalleryType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            galleryRead: (galleryViewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/galleries/${galleryViewId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a new Kanban View
         *
         * @tags DB View
         * @name KanbanCreate
         * @summary Create Kanban View
         * @request POST:/api/v1/db/meta/tables/{tableId}/kanbans
         * @response `200` `ViewType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            kanbanCreate: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/kanbans`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update the Kanban View data with Kanban ID
         *
         * @tags DB View
         * @name KanbanUpdate
         * @summary Update Kanban View
         * @request PATCH:/api/v1/db/meta/kanbans/{kanbanViewId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            kanbanUpdate: (kanbanViewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/kanbans/${kanbanViewId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the Kanban View data by Kanban ID
         *
         * @tags DB View
         * @name KanbanRead
         * @summary Get Kanban View
         * @request GET:/api/v1/db/meta/kanbans/{kanbanViewId}
         * @response `200` `KanbanType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            kanbanRead: (kanbanViewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/kanbans/${kanbanViewId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a new Map View
         *
         * @tags DB View
         * @name MapCreate
         * @summary Create Map View
         * @request POST:/api/v1/db/meta/tables/{tableId}/maps
         * @response `200` `ViewType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            mapCreate: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/maps`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update the Map View data by Map ID
         *
         * @tags DB View
         * @name MapUpdate
         * @summary Update Map View
         * @request PATCH:/api/v1/db/meta/maps/{mapViewId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            mapUpdate: (mapViewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/maps/${mapViewId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the Map View data by Map ID
         *
         * @tags DB View
         * @name MapRead
         * @summary Get Map View
         * @request GET:/api/v1/db/meta/maps/{mapViewId}
         * @response `200` `MapType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            mapRead: (mapViewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/maps/${mapViewId}`, method: 'GET', format: 'json' }, params)),
        };
        this.dbViewShare = {
            /**
         * @description List all shared views in a given Table
         *
         * @tags DB View Share
         * @name List
         * @summary List Shared Views
         * @request GET:/api/v1/db/meta/tables/{tableId}/share
         * @response `200` `SharedViewListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (tableId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/share`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a shared view in a given View..
         *
         * @tags DB View Share
         * @name Create
         * @summary Create Shared View
         * @request POST:/api/v1/db/meta/views/{viewId}/share
         * @response `200` `SharedViewReqType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (viewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/share`, method: 'POST', format: 'json' }, params)),
            /**
         * @description Update a shared view in a given View..
         *
         * @tags DB View Share
         * @name Update
         * @summary Update Shared View
         * @request PATCH:/api/v1/db/meta/views/{viewId}/share
         * @response `200` `SharedViewType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (viewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/share`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete a shared view in a given View.
         *
         * @tags DB View Share
         * @name Delete
         * @summary Delete Shared View
         * @request DELETE:/api/v1/db/meta/views/{viewId}/share
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (viewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/share`, method: 'DELETE', format: 'json' }, params)),
        };
        this.dbViewColumn = {
            /**
         * @description List all columns by ViewID
         *
         * @tags DB View Column
         * @name List
         * @summary List Columns In View
         * @request GET:/api/v1/db/meta/views/{viewId}/columns
         * @response `200` `ColumnListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (viewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/columns`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a new column in a given View
         *
         * @tags DB View Column
         * @name Create
         * @summary Create Column in View
         * @request POST:/api/v1/db/meta/views/{viewId}/columns
         * @response `200` `ColumnType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (viewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/columns`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update a column in a View
         *
         * @tags DB View Column
         * @name Update
         * @summary Update View Column
         * @request PATCH:/api/v1/db/meta/views/{viewId}/columns/{columnId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (viewId, columnId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/columns/${columnId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
        };
        this.dbTableSort = {
            /**
         * @description List all the sort data in a given View
         *
         * @tags DB Table Sort
         * @name List
         * @summary List View Sorts
         * @request GET:/api/v1/db/meta/views/{viewId}/sorts
         * @response `200` `SortListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (viewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/sorts`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the sort data in a given View
         *
         * @tags DB Table Sort
         * @name Create
         * @summary Update View Sort
         * @request POST:/api/v1/db/meta/views/{viewId}/sorts
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (viewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/sorts`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the sort data by Sort ID
         *
         * @tags DB Table Sort
         * @name Get
         * @summary Get Sort
         * @request GET:/api/v1/db/meta/sorts/{sortId}
         * @response `200` `SortType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            get: (sortId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/sorts/${sortId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the sort data by Sort ID
         *
         * @tags DB Table Sort
         * @name Update
         * @summary Update Sort
         * @request PATCH:/api/v1/db/meta/sorts/{sortId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (sortId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/sorts/${sortId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the sort data by Sort ID
         *
         * @tags DB Table Sort
         * @name Delete
         * @summary Delete Sort
         * @request DELETE:/api/v1/db/meta/sorts/{sortId}
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (sortId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/sorts/${sortId}`, method: 'DELETE', format: 'json' }, params)),
        };
        this.dbTableFilter = {
            /**
         * @description Get the filter data in a given View
         *
         * @tags DB Table Filter
         * @name Read
         * @summary Get View Filter
         * @request GET:/api/v1/db/meta/views/{viewId}/filters
         * @response `200` `FilterListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (viewId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/filters`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the filter data in a given View
         *
         * @tags DB Table Filter
         * @name Create
         * @summary Create View Filter
         * @request POST:/api/v1/db/meta/views/{viewId}/filters
         * @response `200` `FilterType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (viewId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/views/${viewId}/filters`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the filter data with a given Filter ID
         *
         * @tags DB Table Filter
         * @name Get
         * @summary Get Filter
         * @request GET:/api/v1/db/meta/filters/{filterId}
         * @response `200` `FilterType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            get: (filterId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/filters/${filterId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the filter data with a given Filter ID
         *
         * @tags DB Table Filter
         * @name Update
         * @summary Update Filter
         * @request PATCH:/api/v1/db/meta/filters/{filterId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (filterId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/filters/${filterId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the filter data with a given Filter ID
         *
         * @tags DB Table Filter
         * @name Delete
         * @summary Delete Filter
         * @request DELETE:/api/v1/db/meta/filters/{filterId}
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (filterId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/filters/${filterId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Get Filter Group Children of a given group ID
         *
         * @tags DB Table Filter
         * @name ChildrenRead
         * @summary Get Filter Group Children
         * @request GET:/api/v1/db/meta/filters/{filterGroupId}/children
         * @response `200` `FilterListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            childrenRead: (filterGroupId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/filters/${filterGroupId}/children`, method: 'GET', format: 'json' }, params)),
        };
        this.dbTableWebhookFilter = {
            /**
         * @description Get the filter data in a given Hook
         *
         * @tags DB Table Webhook Filter
         * @name Read
         * @summary Get Hook Filter
         * @request GET:/api/v1/db/meta/hooks/{hookId}/filters
         * @response `200` `FilterListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (hookId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/hooks/${hookId}/filters`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create filter(s) in a given Hook
         *
         * @tags DB Table Webhook Filter
         * @name Create
         * @summary Create Hook Filter
         * @request POST:/api/v1/db/meta/hooks/{hookId}/filters
         * @response `200` `FilterType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (hookId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/hooks/${hookId}/filters`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
        };
        this.dbTableWebhookLogs = {
            /**
         * @description List the log data in a given Hook
         *
         * @tags DB Table Webhook Logs
         * @name List
         * @summary List Hook Logs
         * @request GET:/api/v1/db/meta/hooks/{hookId}/logs
         * @response `200` `HookLogListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (hookId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/hooks/${hookId}/logs`, method: 'GET', query: query, format: 'json' }, params)),
        };
        this.dbTableRow = {
            /**
         * @description List all table rows in a given table and project
         *
         * @tags DB Table Row
         * @name List
         * @summary List Table Rows
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}
         * @response `200` `{
          \** List of data objects *\
          list: (object)[],
          \** Paginated Info *\
          pageInfo: PaginatedType,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (orgs, projectName, tableName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Create a new row in a given table and project.
         *
         * @tags DB Table Row
         * @name Create
         * @summary Create Table Row
         * @request POST:/api/v1/db/data/{orgs}/{projectName}/{tableName}
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (orgs, projectName, tableName, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Return the first result of the target Table Row
         *
         * @tags DB Table Row
         * @name FindOne
         * @summary Find One Table Row
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/find-one
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            findOne: (orgs, projectName, tableName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/find-one`, method: 'GET', query: query, format: 'json' }, params)),
            /**
             * @description Get the result grouped by the given query
             *
             * @tags DB Table Row
             * @name GroupBy
             * @summary Group By Table Row
             * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/groupby
             * @response `200` `any` OK
             */
            groupBy: (orgs, projectName, tableName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/groupby`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Get the grouped data By Column ID. Used in Kanban View.
         *
         * @tags DB Table Row
         * @name GroupedDataList
         * @summary Table Group by Column
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/group/{columnId}
         * @response `200` `(any)[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            groupedDataList: (orgs, projectName, tableName, columnId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/group/${columnId}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Get the Table Row by Row ID
         *
         * @tags DB Table Row
         * @name Read
         * @summary Get Table Row
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (orgs, projectName, tableName, rowId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Update the Table Row
         *
         * @tags DB Table Row
         * @name Update
         * @summary Update Table Row
         * @request PATCH:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (orgs, projectName, tableName, rowId, data, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}`, method: 'PATCH', query: query, body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the Table Row
         *
         * @tags DB Table Row
         * @name Delete
         * @summary Delete Table Row
         * @request DELETE:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (orgs, projectName, tableName, rowId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}`, method: 'DELETE', query: query, format: 'json' }, params)),
            /**
         * @description check row with provided primary key exists or not
         *
         * @tags DB Table Row
         * @name Exist
         * @summary Does Table Row Exist
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/exist
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            exist: (orgs, projectName, tableName, rowId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}/exist`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Bulk insert table rows in one go.
         *
         * @tags DB Table Row
         * @name BulkCreate
         * @summary Bulk Insert Table Rows
         * @request POST:/api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}
         * @response `200` `({
          id?: string,
        
        })[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            bulkCreate: (orgs, projectName, tableName, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/bulk/${orgs}/${projectName}/${tableName}`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Bulk Update Table Rows by given IDs
         *
         * @tags DB Table Row
         * @name BulkUpdate
         * @summary Bulk Update Table Rows by IDs
         * @request PATCH:/api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}
         * @response `200` `(number)[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            bulkUpdate: (orgs, projectName, tableName, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/bulk/${orgs}/${projectName}/${tableName}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Bulk Delete Table Rows by given IDs
         *
         * @tags DB Table Row
         * @name BulkDelete
         * @summary Bulk Delete Table Rows by IDs
         * @request DELETE:/api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}
         * @response `200` `(number)[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            bulkDelete: (orgs, projectName, tableName, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/bulk/${orgs}/${projectName}/${tableName}`, method: 'DELETE', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Bulk Update all Table Rows if the condition is true
         *
         * @tags DB Table Row
         * @name BulkUpdateAll
         * @summary Bulk Update Table Rows with Conditions
         * @request PATCH:/api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/all
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            bulkUpdateAll: (orgs, projectName, tableName, data, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/bulk/${orgs}/${projectName}/${tableName}/all`, method: 'PATCH', query: query, body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Bulk Delete all Table Rows if the condition is true
         *
         * @tags DB Table Row
         * @name BulkDeleteAll
         * @summary Bulk Delete Table Rows with Conditions
         * @request DELETE:/api/v1/db/data/bulk/{orgs}/{projectName}/{tableName}/all
         * @response `200` `(object)[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            bulkDeleteAll: (orgs, projectName, tableName, data, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/bulk/${orgs}/${projectName}/${tableName}/all`, method: 'DELETE', query: query, body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Export Table View Rows by CSV or Excel
         *
         * @tags DB Table Row
         * @name CsvExport
         * @summary Export Table View Rows
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/export/{type}
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            csvExport: (orgs, projectName, tableName, type, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/export/${type}`, method: 'GET', wrapped: true }, params)),
            /**
         * @description List all nested relations rows
         *
         * @tags DB Table Row
         * @name NestedList
         * @summary List Nested Relations Rows
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/{relationType}/{columnName}
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            nestedList: (orgs, projectName, tableName, rowId, relationType, columnName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}/${relationType}/${columnName}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Create a new nested relations row
         *
         * @tags DB Table Row
         * @name NestedAdd
         * @summary Create Nested Relations Row
         * @request POST:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/{relationType}/{columnName}/{refRowId}
         * @response `200` `{
          \** @example The relation data has been created successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            nestedAdd: (orgs, projectName, tableName, rowId, relationType, columnName, refRowId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}/${relationType}/${columnName}/${refRowId}`, method: 'POST', query: query, format: 'json' }, params)),
            /**
         * @description Delete a new nested relations row
         *
         * @tags DB Table Row
         * @name NestedRemove
         * @summary Delete Nested Relations Row
         * @request DELETE:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/{relationType}/{columnName}/{refRowId}
         * @response `200` `{
          \** @example The relation data has been deleted successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            nestedRemove: (orgs, projectName, tableName, rowId, relationType, columnName, refRowId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}/${relationType}/${columnName}/${refRowId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Get the table rows but exculding the current record's children and parent
         *
         * @tags DB Table Row
         * @name NestedChildrenExcludedList
         * @summary Referenced Table Rows Excluding Current Record's Children / Parent
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/{rowId}/{relationType}/{columnName}/exclude
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            nestedChildrenExcludedList: (orgs, projectName, tableName, rowId, relationType, columnName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/${rowId}/${relationType}/${columnName}/exclude`, method: 'GET', query: query, format: 'json' }, params)),
        };
        this.dbViewRow = {
            /**
         * @description Get the grouped data By Column ID. Used in Kanban View.
         *
         * @tags DB View Row
         * @name GroupedDataList
         * @summary Table Group by Column
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/group/{columnId}
         * @response `200` `(any)[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            groupedDataList: (orgs, projectName, tableName, viewName, columnId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/group/${columnId}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description List all table view rows
         *
         * @tags DB View Row
         * @name List
         * @summary List Table View Rows
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}
         * @response `200` `{
          \** List of table view rows *\
          list: (object)[],
          \** Paginated Info *\
          pageInfo: PaginatedType,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (orgs, projectName, tableName, viewName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Create a new row in the given Table View
         *
         * @tags DB View Row
         * @name Create
         * @summary Create Table View Row
         * @request POST:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (orgs, projectName, tableName, viewName, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Return the first result of table view rows with the given query
         *
         * @tags DB View Row
         * @name FindOne
         * @summary Find One Table View Row
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/find-one
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            findOne: (orgs, projectName, tableName, viewName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/find-one`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Get the table view rows grouped by the given query
         *
         * @tags DB View Row
         * @name GroupBy
         * @summary Group By Table View Row
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/groupby
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            groupBy: (orgs, projectName, tableName, viewName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/groupby`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Count how many rows in the given Table View
         *
         * @tags DB View Row
         * @name Count
         * @summary Count Table View Rows
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/count
         * @response `200` `{
          count?: number,
        
        }` OK
         */
            count: (orgs, projectName, tableName, viewName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/count`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Get the target Table View Row
         *
         * @tags DB View Row
         * @name Read
         * @summary Get Table View Row
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/{rowId}
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (orgs, projectName, tableName, viewName, rowId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/${rowId}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the target Table View Row
         *
         * @tags DB View Row
         * @name Update
         * @summary Update Table View Row
         * @request PATCH:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/{rowId}
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (orgs, projectName, tableName, viewName, rowId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/${rowId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the target Table View Row
         *
         * @tags DB View Row
         * @name Delete
         * @summary Delete Table View Row
         * @request DELETE:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/{rowId}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (orgs, projectName, tableName, viewName, rowId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/${rowId}`, method: 'DELETE', format: 'json' }, params)),
            /**
         * @description Check row with provided primary key exists or not
         *
         * @tags DB View Row
         * @name Exist
         * @summary Does Table View Row Exist
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/{rowId}/exist
         * @response `201` `number` Created
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            exist: (orgs, projectName, tableName, viewName, rowId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/${rowId}/exist`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Export Table View Rows by CSV or Excel
         *
         * @tags DB View Row
         * @name Export
         * @summary Export Table View Rows
         * @request GET:/api/v1/db/data/{orgs}/{projectName}/{tableName}/views/{viewName}/export/{type}
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            export: (orgs, projectName, tableName, viewName, type, params = {}) => this.request(Object.assign({ path: `/api/v1/db/data/${orgs}/${projectName}/${tableName}/views/${viewName}/export/${type}`, method: 'GET', wrapped: true }, params)),
        };
        this.public = {
            /**
         * @description List Shared View Grouped Data
         *
         * @tags Public
         * @name GroupedDataList
         * @summary List Shared View Grouped Data
         * @request GET:/api/v1/db/public/shared-view/{sharedViewUuid}/group/{columnId}
         * @response `200` `({
          \** The Grouped Key *\
          key: string,
          \** the paginated result of the given key *\
          value: {
          \** List of the target data *\
          list: (object)[],
          \** Paginated Info *\
          pageInfo: PaginatedType,
        
        },
        
        })[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            groupedDataList: (sharedViewUuid, columnId, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/group/${columnId}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description List all shared view rows
         *
         * @tags Public
         * @name DataList
         * @summary List Shared View Rows
         * @request GET:/api/v1/db/public/shared-view/{sharedViewUuid}/rows
         * @response `200` `SharedViewListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            dataList: (sharedViewUuid, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/rows`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Create a new row for the target shared view
         *
         * @tags Public
         * @name DataCreate
         * @summary Create Share View Row
         * @request POST:/api/v1/db/public/shared-view/{sharedViewUuid}/rows
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            dataCreate: (sharedViewUuid, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/rows`, method: 'POST', body: data, type: ContentType.FormData, format: 'json' }, params)),
            /**
         * @description List all shared view rows grouped by a column
         *
         * @tags Public
         * @name DataGroupBy
         * @summary List Shared View Rows
         * @request GET:/api/v1/db/public/shared-view/{sharedViewUuid}/groupby
         * @response `200` `SharedViewListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            dataGroupBy: (sharedViewUuid, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/groupby`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description List all nested list data in a given shared view
         *
         * @tags Public
         * @name DataNestedList
         * @summary List Nested List Data
         * @request GET:/api/v1/db/public/shared-view/{sharedViewUuid}/rows/{rowId}/{relationType}/{columnName}
         * @response `200` `{
          \** List of data objects *\
          list: (object)[],
          \** Paginated info *\
          pageInfo: PaginatedType,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            dataNestedList: (sharedViewUuid, rowId, relationType, columnName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/rows/${rowId}/${relationType}/${columnName}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Export all rows in Share View in a CSV / Excel Format
         *
         * @tags Public
         * @name CsvExport
         * @summary Export Rows in Share View
         * @request GET:/api/v1/db/public/shared-view/{sharedViewUuid}/rows/export/{type}
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            csvExport: (sharedViewUuid, type, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/rows/export/${type}`, method: 'GET', wrapped: true }, params)),
            /**
         * @description List Nested Data Relation
         *
         * @tags Public
         * @name DataRelationList
         * @summary List Nested Data Relation
         * @request GET:/api/v1/db/public/shared-view/{sharedViewUuid}/nested/{columnName}
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            dataRelationList: (sharedViewUuid, columnName, query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/nested/${columnName}`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Get Share Base Meta
         *
         * @tags Public
         * @name SharedBaseGet
         * @summary Get Share Base Meta
         * @request GET:/api/v1/db/public/shared-base/{sharedBaseUuid}/meta
         * @response `200` `{
          \** Project ID *\
          project_id?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            sharedBaseGet: (sharedBaseUuid, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-base/${sharedBaseUuid}/meta`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Get Share View Meta
         *
         * @tags Public
         * @name SharedViewMetaGet
         * @summary Get Share View Meta
         * @request GET:/api/v1/db/public/shared-view/{sharedViewUuid}/meta
         * @response `200` `(ViewType & {
          relatedMetas?: any,
          client?: string,
          base_id?: string,
          columns?: ((GridColumnType | FormColumnType | GalleryColumnType | (GridColumnType & FormColumnType & GalleryColumnType)) & ColumnType),
          \** Model for Table *\
          model?: TableType,
        
        } & {
          view?: (FormType | GridType | GalleryType | (FormType & GridType & GalleryType)),
        
        })` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            sharedViewMetaGet: (sharedViewUuid, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-view/${sharedViewUuid}/meta`, method: 'GET', format: 'json' }, params)),
            /**
             * No description
             *
             * @tags Public
             * @name SharedErdMetaGet
             * @request GET:/api/v1/db/public/shared-erd/{sharedErdUuid}/meta
             */
            sharedErdMetaGet: (sharedErdUuid, params = {}) => this.request(Object.assign({ path: `/api/v1/db/public/shared-erd/${sharedErdUuid}/meta`, method: 'GET' }, params)),
        };
        this.utils = {
            /**
         * @description List all comments
         *
         * @tags Utils
         * @name CommentList
         * @summary List Comments in Audit
         * @request GET:/api/v1/db/meta/audits/comments
         * @response `200` `{
          list: (AuditType)[],
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            commentList: (query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/audits/comments`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Create a new comment in a row. Logged in Audit.
         *
         * @tags Utils
         * @name CommentRow
         * @summary Comment Rows
         * @request POST:/api/v1/db/meta/audits/comments
         * @response `200` `AuditType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            commentRow: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/audits/comments`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
             * @description Update comment in Audit
             *
             * @tags Utils
             * @name CommentUpdate
             * @summary Update Comment in Audit
             * @request PATCH:/api/v1/db/meta/audits/{auditId}/comment
             * @response `200` `number` OK
             */
            commentUpdate: (auditId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/audits/${auditId}/comment`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Return the number of comments in the given query.
         *
         * @tags Utils
         * @name CommentCount
         * @summary Count Comments
         * @request GET:/api/v1/db/meta/audits/comments/count
         * @response `200` `({
          \**
           * The number of comments
           * @example 4
           *\
          count: string,
          \**
           * Row ID
           * @example 1
           *\
          row_id: string,
        
        })[]` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            commentCount: (query, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/audits/comments/count`, method: 'GET', query: query, format: 'json' }, params)),
            /**
         * @description Update Audit Row
         *
         * @tags Utils
         * @name AuditRowUpdate
         * @summary Update Audit Row
         * @request POST:/api/v1/db/meta/audits/rows/{rowId}/update
         * @response `200` `AuditType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            auditRowUpdate: (rowId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/audits/rows/${rowId}/update`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Test the DB Connection
         *
         * @tags Utils
         * @name TestConnection
         * @summary Test DB Connection
         * @request POST:/api/v1/db/meta/connection/test
         * @response `200` `{
          code?: number,
          message?: string,
          data?: object,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            testConnection: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/connection/test`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
             * No description
             *
             * @tags Utils
             * @name SelectQuery
             * @request POST:/api/v1/db/meta/connection/select
             * @response `200` `any` OK
             */
            selectQuery: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/connection/select`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Extract XC URL From JDBC and parse to connection config
         *
         * @tags Utils
         * @name UrlToConfig
         * @summary Convert JDBC URL to Config
         * @request POST:/api/v1/url_to_config
         * @response `200` `{
          \**
           * DB Type
           * @example mysql2
           *\
          client?: "mssql" | "mysql" | "mysql2" | "oracledb" | "pg" | "snowflake" | "sqlite3",
          \** Connection Config *\
          connection?: {
          \** DB User *\
          user?: string,
          \** DB Password *\
          password?: string,
          \** DB Name *\
          database?: string,
          \** DB Host *\
          host?: string,
          \** DB Host *\
          port?: string,
        
        },
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            urlToConfig: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/url_to_config`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the application info such as authType, defaultLimit, version and etc.
         *
         * @tags Utils
         * @name AppInfo
         * @summary Get App Info
         * @request GET:/api/v1/db/meta/nocodb/info
         * @response `200` `{
          authType?: string,
          projectHasAdmin?: boolean,
          firstUser?: boolean,
          type?: string,
          googleAuthEnabled?: boolean,
          githubAuthEnabled?: boolean,
          oneClick?: boolean,
          connectToExternalDB?: boolean,
          version?: string,
          defaultLimit?: number,
          ncMin?: boolean,
          teleEnabled?: boolean,
          auditEnabled?: boolean,
          ncSiteUrl?: string,
          ee?: boolean,
          ncAttachmentFieldSize?: number,
          ncMaxAttachmentsAllowed?: number,
          isCloud?: boolean,
          \** @example OFF *\
          automationLogLevel?: "OFF" | "ERROR" | "ALL",
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            appInfo: (params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/nocodb/info`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Generic Axios Call
         *
         * @tags Utils
         * @name AxiosRequestMake
         * @summary Axios Request
         * @request POST:/api/v1/db/meta/axiosRequestMake
         * @response `200` `object` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            axiosRequestMake: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/axiosRequestMake`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the application version
         *
         * @tags Utils
         * @name AppVersion
         * @summary Get App Version
         * @request GET:/api/v1/version
         * @response `200` `{
          \**
           * Current NocoDB Version
           * @example 0.104.0
           *\
          currentVersion?: string,
          \**
           * Latest Release Version
           * @example 0.105.3
           *\
          releaseVersion?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            appVersion: (params = {}) => this.request(Object.assign({ path: `/api/v1/version`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Get Application Health Status
         *
         * @tags Utils
         * @name AppHealth
         * @summary Get Application Health Status
         * @request GET:/api/v1/health
         * @response `200` `{
          \** @example OK *\
          message?: string,
          \** @example 1678702175755 *\
          timestamp?: string,
          \** @example 1618.996877834 *\
          uptime?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            appHealth: (params = {}) => this.request(Object.assign({ path: `/api/v1/health`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Get Aggregated Meta Info such as tableCount, dbViewCount, viewCount and etc.
         *
         * @tags Utils
         * @name AggregatedMetaInfo
         * @summary Get Aggregated Meta Info
         * @request GET:/api/v1/aggregated-meta-info
         * @response `200` `{
          projectCount?: number,
          projects?: ({
          tableCount?: {
          \** Table Count *\
          table?: number,
          \** View Count *\
          view?: number,
        
        },
          \** External Project *\
          external?: boolean,
          viewCount?: {
          \** Form Count *\
          formCount?: number,
          \** Grid Count *\
          gridCount?: number,
          \** Gallery Count *\
          galleryCount?: number,
          \** Kanban Count *\
          kanbanCount?: number,
          \** Total View Count *\
          total?: number,
          \** Shared Form Count *\
          sharedFormCount?: number,
          \** Shared Grid Count *\
          sharedGridCount?: number,
          \** Shared Gallery Count *\
          sharedGalleryCount?: number,
          \** Shared Kanban Count *\
          sharedKanbanCount?: number,
          \** Shared Total View Count *\
          sharedTotal?: number,
          \** Shared Locked View Count *\
          sharedLockedCount?: number,
        
        },
          \** Webhook Count *\
          webhookCount?: number,
          \** Filter Count *\
          filterCount?: number,
          \** Sort Count *\
          sortCount?: number,
          \** Row Count *\
          rowCount?: ({
          TotalRecords?: string,
        
        })[],
          \** Total project user Count *\
          userCount?: number,
        
        })[],
          \** Total user Count *\
          userCount?: number,
          \** Total shared base Count *\
          sharedBaseCount?: number,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            aggregatedMetaInfo: (params = {}) => this.request(Object.assign({ path: `/api/v1/aggregated-meta-info`, method: 'GET', format: 'json' }, params)),
            /**
             * @description Get All K/V pairs in NocoCache
             *
             * @tags Utils
             * @name CacheGet
             * @summary Get Cache
             * @request GET:/api/v1/db/meta/cache
             */
            cacheGet: (params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/cache`, method: 'GET' }, params)),
            /**
         * @description Delete All K/V pairs in NocoCache
         *
         * @tags Utils
         * @name CacheDelete
         * @summary Delete Cache
         * @request DELETE:/api/v1/db/meta/cache
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            cacheDelete: (params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/cache`, method: 'DELETE', format: 'json' }, params)),
        };
        this.dbTableWebhook = {
            /**
         * @description List all hook records in the given Table
         *
         * @tags DB Table Webhook
         * @name List
         * @summary List Table Hooks
         * @request GET:/api/v1/db/meta/tables/{tableId}/hooks
         * @response `200` `HookListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (tableId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/hooks`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create a hook in the given table
         *
         * @tags DB Table Webhook
         * @name Create
         * @summary Create Table Hook
         * @request POST:/api/v1/db/meta/tables/{tableId}/hooks
         * @response `200` `HookType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/hooks`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Test the hook in the given Table
         *
         * @tags DB Table Webhook
         * @name Test
         * @summary Test Hook
         * @request POST:/api/v1/db/meta/tables/{tableId}/hooks/test
         * @response `200` `{
          \** @example The hook has been tested successfully *\
          msg?: string,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            test: (tableId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/hooks/test`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the sample hook payload
         *
         * @tags DB Table Webhook
         * @name SamplePayloadGet
         * @summary Get Sample Hook Payload
         * @request GET:/api/v1/db/meta/tables/{tableId}/hooks/samplePayload/{operation}/{version}
         * @response `200` `{
          \** Sample Payload Data *\
          data?: object,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            samplePayloadGet: (tableId, operation, version, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/tables/${tableId}/hooks/samplePayload/${operation}/${version}`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Update the exsiting hook by its ID
         *
         * @tags DB Table Webhook
         * @name Update
         * @summary Update Hook
         * @request PATCH:/api/v1/db/meta/hooks/{hookId}
         * @response `200` `HookType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (hookId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/hooks/${hookId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the exsiting hook by its ID
         *
         * @tags DB Table Webhook
         * @name Delete
         * @summary Delete Hook
         * @request DELETE:/api/v1/db/meta/hooks/{hookId}
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (hookId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/hooks/${hookId}`, method: 'DELETE', format: 'json' }, params)),
        };
        this.plugin = {
            /**
         * @description List all plugins
         *
         * @tags Plugin
         * @name List
         * @summary List Plugins
         * @request GET:/api/v1/db/meta/plugins
         * @response `200` `{
          list?: (PluginType)[],
          \** Model for Paginated *\
          pageInfo?: PaginatedType,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/plugins`, method: 'GET', format: 'json' }, params)),
            /**
         * @description List all webhook plugins
         *
         * @tags Plugin
         * @name WebhookList
         * @summary Webhook List Plugins
         * @request GET:/api/v1/db/meta/plugins/webhook
         * @response `200` `{
          list?: (PluginType)[],
          \** Model for Paginated *\
          pageInfo?: PaginatedType,
        
        }` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            webhookList: (params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/plugins/webhook`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Check plugin is active or not
         *
         * @tags Plugin
         * @name Status
         * @summary Get Plugin Status
         * @request GET:/api/v1/db/meta/plugins/{pluginTitle}/status
         * @response `200` `boolean` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            status: (pluginTitle, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/plugins/${pluginTitle}/status`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Test if the plugin is working with the given configurations
         *
         * @tags Plugin
         * @name Test
         * @summary Test Plugin
         * @request POST:/api/v1/db/meta/plugins/test
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            test: (data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/plugins/test`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Update the plugin data by ID
         *
         * @tags Plugin
         * @name Update
         * @summary Update Plugin
         * @request PATCH:/api/v1/db/meta/plugins/{pluginId}
         * @response `200` `any` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            update: (pluginId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/plugins/${pluginId}`, method: 'PATCH', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Get the plugin data by ID
         *
         * @tags Plugin
         * @name Read
         * @summary Get Plugin
         * @request GET:/api/v1/db/meta/plugins/{pluginId}
         * @response `200` `PluginType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            read: (pluginId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/plugins/${pluginId}`, method: 'GET', format: 'json' }, params)),
        };
        this.apiToken = {
            /**
         * @description List API Tokens in the given project
         *
         * @tags API Token
         * @name List
         * @summary List API Tokens in Project
         * @request GET:/api/v1/db/meta/projects/{projectId}/api-tokens
         * @response `200` `ApiTokenListType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            list: (projectId, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/api-tokens`, method: 'GET', format: 'json' }, params)),
            /**
         * @description Create API Token in a project
         *
         * @tags API Token
         * @name Create
         * @summary Create API Token
         * @request POST:/api/v1/db/meta/projects/{projectId}/api-tokens
         * @response `200` `ApiTokenType` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            create: (projectId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/api-tokens`, method: 'POST', body: data, type: ContentType.Json, format: 'json' }, params)),
            /**
         * @description Delete the given API Token in project
         *
         * @tags API Token
         * @name Delete
         * @summary Delete API Token
         * @request DELETE:/api/v1/db/meta/projects/{projectId}/api-tokens/{token}
         * @response `200` `number` OK
         * @response `400` `{
          \** @example BadRequest [Error]: <ERROR MESSAGE> *\
          msg: string,
        
        }`
         */
            delete: (projectId, token, params = {}) => this.request(Object.assign({ path: `/api/v1/db/meta/projects/${projectId}/api-tokens/${token}`, method: 'DELETE', format: 'json' }, params)),
        };
        this.storage = {
            /**
             * @description Upload attachment
             *
             * @tags Storage
             * @name Upload
             * @summary Attachment Upload
             * @request POST:/api/v1/db/storage/upload
             */
            upload: (query, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/storage/upload`, method: 'POST', query: query, body: data, type: ContentType.FormData }, params)),
            /**
             * @description Upload attachment by URL. Used in Airtable Migration.
             *
             * @tags Storage
             * @name UploadByUrl
             * @summary Attachment Upload by URL
             * @request POST:/api/v1/db/storage/upload-by-url
             */
            uploadByUrl: (query, data, params = {}) => this.request(Object.assign({ path: `/api/v1/db/storage/upload-by-url`, method: 'POST', query: query, body: data, type: ContentType.Json }, params)),
        };
        this.notification = {
            /**
             * @description List notifications
             *
             * @tags Notification
             * @name List
             * @summary Notification list
             * @request GET:/api/v1/notifications
             * @response `200` `NotificationListType` OK
             */
            list: (query, params = {}) => this.request(Object.assign({ path: `/api/v1/notifications`, method: 'GET', query: query, format: 'json' }, params)),
            /**
             * @description Notificattion update
             *
             * @tags Notification
             * @name Update
             * @summary Notification update
             * @request PATCH:/api/v1/notifications/{notificationId}
             * @response `200` `void` OK
             */
            update: (notificationId, data, params = {}) => this.request(Object.assign({ path: `/api/v1/notifications/${notificationId}`, method: 'PATCH', body: data, type: ContentType.Json }, params)),
            /**
             * @description Delete notification
             *
             * @tags Notification
             * @name Delete
             * @summary Delete notification
             * @request DELETE:/api/v1/notifications/{notificationId}
             * @response `200` `void` OK
             */
            delete: (notificationId, params = {}) => this.request(Object.assign({ path: `/api/v1/notifications/${notificationId}`, method: 'DELETE' }, params)),
            /**
             * @description Mark all notifications as read
             *
             * @tags Notification
             * @name MarkAllAsRead
             * @summary Mark all notifications as read
             * @request POST:/api/v1/notifications/mark-all-read
             * @response `200` `void` OK
             */
            markAllAsRead: (params = {}) => this.request(Object.assign({ path: `/api/v1/notifications/mark-all-read`, method: 'POST' }, params)),
        };
    }
}
exports.Api = Api;
//# sourceMappingURL=data:application/json;base64,