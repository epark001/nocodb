"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KafkaService = void 0;
const common_1 = require("@nestjs/common");
const kafkajs_1 = require("kafkajs");
const KafkaDecorator_1 = require("./KafkaDecorator");
const KafkaMessage_1 = require("./KafkaMessage");
let KafkaService = class KafkaService {
    constructor(kafkaConfig) {
        this.kafkaConfig = kafkaConfig;
        this.consumerSuffix = '-' + Math.floor(Math.random() * 100000);
        this.kafka = new kafkajs_1.Kafka({
            clientId: this.kafkaConfig.clientId,
            brokers: this.kafkaConfig.brokers,
        });
        this.producer = this.kafka.producer();
        this.consumer = this.kafka.consumer({
            groupId: this.kafkaConfig.groupId + this.consumerSuffix,
        });
        this.fixedConsumer = this.kafka.consumer({
            groupId: this.kafkaConfig.groupId,
        });
    }
    onModuleInit() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connect();
            KafkaDecorator_1.SUBSCRIBER_FN_REF_MAP.forEach((functionRef, topic) => {
                this.bindAllTopicToConsumer(functionRef, topic);
            });
            KafkaDecorator_1.SUBSCRIBER_FIXED_FN_REF_MAP.forEach((functionRef, topic) => {
                this.bindAllTopicToFixedConsumer(functionRef, topic);
            });
        });
    }
    onModuleDestroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.disconnect();
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.producer.connect();
            yield this.consumer.connect();
            yield this.fixedConsumer.connect();
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.producer.disconnect();
            yield this.consumer.disconnect();
            yield this.fixedConsumer.disconnect();
        });
    }
    bindAllTopicToConsumer(callback, _topic) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.consumer.subscribe({ topic: _topic, fromBeginning: false });
            yield this.consumer.run({
                eachMessage: ({ topic, partition, message }) => __awaiter(this, void 0, void 0, function* () {
                    const functionRef = KafkaDecorator_1.SUBSCRIBER_FN_REF_MAP.get(topic);
                    const object = KafkaDecorator_1.SUBSCRIBER_OBJ_REF_MAP.get(topic);
                    yield functionRef.apply(object, [message.value.toString()]);
                }),
            });
        });
    }
    bindAllTopicToFixedConsumer(callback, _topic) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.fixedConsumer.subscribe({ topic: _topic, fromBeginning: false });
            yield this.fixedConsumer.run({
                eachMessage: ({ topic, partition, message }) => __awaiter(this, void 0, void 0, function* () {
                    const functionRef = KafkaDecorator_1.SUBSCRIBER_FIXED_FN_REF_MAP.get(topic);
                    const object = KafkaDecorator_1.SUBSCRIBER_OBJ_REF_MAP.get(topic);
                    yield functionRef.apply(object, [message.value.toString()]);
                }),
            });
        });
    }
    sendMessage(kafkaTopic, kafkaMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.producer.connect();
            const metadata = yield this.producer
                .send({
                topic: kafkaTopic,
                messages: [{ value: JSON.stringify(kafkaMessage) }],
            })
                .catch(e => console.error(e.message, e));
            yield this.producer.disconnect();
            return metadata;
        });
    }
};
KafkaService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [KafkaMessage_1.KafkaConfig])
], KafkaService);
exports.KafkaService = KafkaService;
//# sourceMappingURL=KafkaService.js.map