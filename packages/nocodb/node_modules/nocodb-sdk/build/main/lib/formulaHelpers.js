"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsepTreeToFormula = exports.substituteColumnIdWithAliasInFormula = exports.substituteColumnAliasWithIdInFormula = exports.jsepCurlyHook = void 0;
const jsep_1 = __importDefault(require("jsep"));
exports.jsepCurlyHook = {
    name: 'curly',
    init(jsep) {
        jsep.hooks.add('gobble-token', function gobbleCurlyLiteral(env) {
            const OCURLY_CODE = 123; // {
            const CCURLY_CODE = 125; // }
            let start = -1;
            const { context } = env;
            if (!jsep.isIdentifierStart(context.code) &&
                context.code === OCURLY_CODE) {
                if (start == -1) {
                    start = context.index;
                }
                context.index += 1;
                context.gobbleExpressions(CCURLY_CODE);
                if (context.code === CCURLY_CODE) {
                    context.index += 1;
                    env.node = {
                        type: jsep.IDENTIFIER,
                        name: /{{(.*?)}}/.test(context.expr)
                            ? // start would be the position of the first curly bracket
                                // add 2 to point to the first character for expressions like {{col1}}
                                context.expr.slice(start + 2, context.index - 1)
                            : // start would be the position of the first curly bracket
                                // add 1 to point to the first character for expressions like {col1}
                                context.expr.slice(start + 1, context.index - 1),
                    };
                    return env.node;
                }
                else {
                    context.throwError('Unclosed }');
                }
            }
        });
    },
};
async function substituteColumnAliasWithIdInFormula(formula, columns) {
    const substituteId = async (pt) => {
        if (pt.type === 'CallExpression') {
            for (const arg of pt.arguments || []) {
                await substituteId(arg);
            }
        }
        else if (pt.type === 'Literal') {
            return;
        }
        else if (pt.type === 'Identifier') {
            const colNameOrId = pt.name;
            const column = columns.find((c) => c.id === colNameOrId ||
                c.column_name === colNameOrId ||
                c.title === colNameOrId);
            pt.name = '{' + column.id + '}';
        }
        else if (pt.type === 'BinaryExpression') {
            await substituteId(pt.left);
            await substituteId(pt.right);
        }
    };
    // register jsep curly hook
    jsep_1.default.plugins.register(exports.jsepCurlyHook);
    const parsedFormula = (0, jsep_1.default)(formula);
    await substituteId(parsedFormula);
    return jsepTreeToFormula(parsedFormula);
}
exports.substituteColumnAliasWithIdInFormula = substituteColumnAliasWithIdInFormula;
function substituteColumnIdWithAliasInFormula(formula, columns, rawFormula) {
    const substituteId = (pt, ptRaw) => {
        var _a;
        if (pt.type === 'CallExpression') {
            let i = 0;
            for (const arg of pt.arguments || []) {
                substituteId(arg, (_a = ptRaw === null || ptRaw === void 0 ? void 0 : ptRaw.arguments) === null || _a === void 0 ? void 0 : _a[i++]);
            }
        }
        else if (pt.type === 'Literal') {
            return;
        }
        else if (pt.type === 'Identifier') {
            const colNameOrId = pt === null || pt === void 0 ? void 0 : pt.name;
            const column = columns.find((c) => c.id === colNameOrId ||
                c.column_name === colNameOrId ||
                c.title === colNameOrId);
            pt.name = (column === null || column === void 0 ? void 0 : column.title) || (ptRaw === null || ptRaw === void 0 ? void 0 : ptRaw.name) || (pt === null || pt === void 0 ? void 0 : pt.name);
        }
        else if (pt.type === 'BinaryExpression') {
            substituteId(pt.left, ptRaw === null || ptRaw === void 0 ? void 0 : ptRaw.left);
            substituteId(pt.right, ptRaw === null || ptRaw === void 0 ? void 0 : ptRaw.right);
        }
    };
    // register jsep curly hook
    jsep_1.default.plugins.register(exports.jsepCurlyHook);
    const parsedFormula = (0, jsep_1.default)(formula);
    const parsedRawFormula = rawFormula && (0, jsep_1.default)(rawFormula);
    substituteId(parsedFormula, parsedRawFormula);
    return jsepTreeToFormula(parsedFormula);
}
exports.substituteColumnIdWithAliasInFormula = substituteColumnIdWithAliasInFormula;
function jsepTreeToFormula(node) {
    if (node.type === 'BinaryExpression' || node.type === 'LogicalExpression') {
        return ('(' +
            jsepTreeToFormula(node.left) +
            ' ' +
            node.operator +
            ' ' +
            jsepTreeToFormula(node.right) +
            ')');
    }
    if (node.type === 'UnaryExpression') {
        return node.operator + jsepTreeToFormula(node.argument);
    }
    if (node.type === 'MemberExpression') {
        return (jsepTreeToFormula(node.object) +
            '[' +
            jsepTreeToFormula(node.property) +
            ']');
    }
    if (node.type === 'Identifier') {
        const formulas = [
            'AVG',
            'ADD',
            'DATEADD',
            'DATETIME_DIFF',
            'WEEKDAY',
            'AND',
            'OR',
            'CONCAT',
            'TRIM',
            'UPPER',
            'LOWER',
            'LEN',
            'MIN',
            'MAX',
            'CEILING',
            'FLOOR',
            'ROUND',
            'MOD',
            'REPEAT',
            'LOG',
            'EXP',
            'POWER',
            'SQRT',
            'SQRT',
            'ABS',
            'NOW',
            'REPLACE',
            'SEARCH',
            'INT',
            'RIGHT',
            'LEFT',
            'SUBSTR',
            'MID',
            'IF',
            'SWITCH',
            'URL',
        ];
        if (!formulas.includes(node.name.toUpperCase()))
            return '{' + node.name + '}';
        return node.name;
    }
    if (node.type === 'Literal') {
        if (typeof node.value === 'string') {
            return String.raw `"${escapeLiteral(node.value)}"`;
        }
        return '' + node.value;
    }
    if (node.type === 'CallExpression') {
        return (jsepTreeToFormula(node.callee) +
            '(' +
            node.arguments.map(jsepTreeToFormula).join(', ') +
            ')');
    }
    if (node.type === 'ArrayExpression') {
        return '[' + node.elements.map(jsepTreeToFormula).join(', ') + ']';
    }
    if (node.type === 'Compound') {
        return node.body.map((e) => jsepTreeToFormula(e)).join(' ');
    }
    if (node.type === 'ConditionalExpression') {
        return (jsepTreeToFormula(node.test) +
            ' ? ' +
            jsepTreeToFormula(node.consequent) +
            ' : ' +
            jsepTreeToFormula(node.alternate));
    }
    return '';
}
exports.jsepTreeToFormula = jsepTreeToFormula;
function escapeLiteral(v) {
    return (v
        // replace \ to \\
        .replace(/\\/g, `\\\\`)
        // replace " to \"
        .replace(/"/g, `\\"`)
        // replace ' to \'
        .replace(/'/g, `\\'`));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXVsYUhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2Zvcm11bGFIZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUlYLFFBQUEsYUFBYSxHQUFHO0lBQzNCLElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxDQUFDLElBQUk7UUFDUCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsU0FBUyxrQkFBa0IsQ0FBQyxHQUFHO1lBQzVELE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUk7WUFDN0IsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSTtZQUM3QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDeEIsSUFDRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUNyQyxPQUFPLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFDNUI7Z0JBQ0EsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLEVBQUU7b0JBQ2YsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7aUJBQ3ZCO2dCQUNELE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO2dCQUNuQixPQUFPLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7b0JBQ2hDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO29CQUNuQixHQUFHLENBQUMsSUFBSSxHQUFHO3dCQUNULElBQUksRUFBRSxJQUFJLENBQUMsVUFBVTt3QkFDckIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQzs0QkFDbEMsQ0FBQyxDQUFDLHlE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