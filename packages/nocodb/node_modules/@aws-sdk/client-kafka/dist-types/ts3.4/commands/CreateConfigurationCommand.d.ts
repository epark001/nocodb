import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@smithy/types";
import {
  KafkaClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../KafkaClient";
import {
  CreateConfigurationRequest,
  CreateConfigurationResponse,
} from "../models/models_0";
export { __MetadataBearer, $Command };
export interface CreateConfigurationCommandInput
  extends CreateConfigurationRequest {}
export interface CreateConfigurationCommandOutput
  extends CreateConfigurationResponse,
    __MetadataBearer {}
export declare class CreateConfigurationCommand extends $Command<
  CreateConfigurationCommandInput,
  CreateConfigurationCommandOutput,
  KafkaClientResolvedConfig
> {
  readonly input: CreateConfigurationCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: CreateConfigurationCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: KafkaClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<CreateConfigurationCommandInput, CreateConfigurationCommandOutput>;
  private serialize;
  private deserialize;
}
