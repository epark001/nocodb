import { KafkaServiceException as __BaseException } from "./KafkaServiceException";
export const VpcConnectionState = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DEACTIVATING: "DEACTIVATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
    REJECTED: "REJECTED",
    REJECTING: "REJECTING",
};
export const ClusterType = {
    PROVISIONED: "PROVISIONED",
    SERVERLESS: "SERVERLESS",
};
export const BrokerAZDistribution = {
    DEFAULT: "DEFAULT",
};
export const ClientBroker = {
    PLAINTEXT: "PLAINTEXT",
    TLS: "TLS",
    TLS_PLAINTEXT: "TLS_PLAINTEXT",
};
export const EnhancedMonitoring = {
    DEFAULT: "DEFAULT",
    PER_BROKER: "PER_BROKER",
    PER_TOPIC_PER_BROKER: "PER_TOPIC_PER_BROKER",
    PER_TOPIC_PER_PARTITION: "PER_TOPIC_PER_PARTITION",
};
export const StorageMode = {
    LOCAL: "LOCAL",
    TIERED: "TIERED",
};
export const ClusterState = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    HEALING: "HEALING",
    MAINTENANCE: "MAINTENANCE",
    REBOOTING_BROKER: "REBOOTING_BROKER",
    UPDATING: "UPDATING",
};
export const UserIdentityType = {
    AWSACCOUNT: "AWSACCOUNT",
    AWSSERVICE: "AWSSERVICE",
};
export const ConfigurationState = {
    ACTIVE: "ACTIVE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
};
export const KafkaVersionStatus = {
    ACTIVE: "ACTIVE",
    DEPRECATED: "DEPRECATED",
};
export const NodeType = {
    BROKER: "BROKER",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
export class UnauthorizedException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
