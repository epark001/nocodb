"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringifyRolesObj = exports.extractRolesObj = exports.isSystemColumn = exports.getSystemColumns = exports.getSystemColumnsIds = exports.filterOutSystemColumns = void 0;
const UITypes_1 = __importDefault(require("./UITypes"));
// import {RelationTypes} from "./globals";
// const systemCols = ['created_at', 'updated_at']
const filterOutSystemColumns = (columns) => {
    return (columns && columns.filter((c) => !isSystemColumn(c))) || [];
};
exports.filterOutSystemColumns = filterOutSystemColumns;
const getSystemColumnsIds = (columns) => {
    return ((columns && columns.filter(isSystemColumn)) || []).map((c) => c.id);
};
exports.getSystemColumnsIds = getSystemColumnsIds;
const getSystemColumns = (columns) => columns.filter(isSystemColumn) || [];
exports.getSystemColumns = getSystemColumns;
const isSystemColumn = (col) => col &&
    (col.uidt === UITypes_1.default.ForeignKey ||
        col.column_name === 'created_at' ||
        col.column_name === 'updated_at' ||
        (col.pk && (col.ai || col.cdf)) ||
        (col.pk && col.meta && col.meta.ag) ||
        col.system);
exports.isSystemColumn = isSystemColumn;
const extractRolesObj = (roles) => {
    if (!roles)
        return null;
    if (typeof roles === 'object' && !Array.isArray(roles))
        return roles;
    if (typeof roles === 'string') {
        roles = roles.split(',');
    }
    if (roles.length === 0)
        return null;
    return roles.reduce((acc, role) => {
        acc[role] = true;
        return acc;
    }, {});
};
exports.extractRolesObj = extractRolesObj;
const stringifyRolesObj = (roles) => {
    const rolesArr = Object.keys(roles).filter((r) => roles[r]);
    return rolesArr.join(',');
};
exports.stringifyRolesObj = stringifyRolesObj;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyRnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9oZWxwZXJGdW5jdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0RBQWdDO0FBR2hDLDJDQUEyQztBQUUzQyxrREFBa0Q7QUFDbEQsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQ3pDLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN0RSxDQUFDLENBQUM7QUE0Q0Esd0RBQXNCO0FBM0N4QixNQUFNLG1CQUFtQixHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDdEMsT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM5RSxDQUFDLENBQUM7QUEwQ0Esa0RBQW1CO0FBeENyQixNQUFNLGdCQUFnQixHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQXlDekUsNENBQWdCO0FBdkNsQixNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQUcsRUFBVyxFQUFFLENBQ3RDLEdBQUc7SUFDSCxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssaUJBQU8sQ0FBQyxVQUFVO1FBQzlCLEdBQUcsQ0FBQyxXQUFXLEtBQUssWUFBWTtRQUNoQyxHQUFHLENBQUMsV0FBVyxLQUFLLFlBQVk7UUFDaEMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbkMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBaUNkLHdDQUFjO0FBMUJoQixNQUFNLGVBQWUsR0FBRyxDQUFDLEtBQWdDLEVBQVMsRUFBRTtJQUNsRSxJQUFJLENBQUMsS0FBSztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBRXhCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUVyRSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMxQjtJQUVELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFFcEMsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ2hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDakIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDVCxDQUFDLENBQUM7QUFZQSwwQ0FBZTtBQVZqQixNQUFNLGlCQUFpQixHQUFHLENBQUMsS0FBWSxFQUFVLEVBQUU7SUFDakQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUM7QUFRQSw4Q0FBaUIifQ==