"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThrottlerStorageRedisService = void 0;
const common_1 = require("@nestjs/common");
const ioredis_1 = require("ioredis");
let ThrottlerStorageRedisService = class ThrottlerStorageRedisService {
    constructor(redisOrOptions) {
        if (redisOrOptions instanceof ioredis_1.default || redisOrOptions instanceof ioredis_1.Cluster) {
            this.redis = redisOrOptions;
        }
        else if (typeof redisOrOptions === 'string') {
            this.redis = new ioredis_1.default(redisOrOptions);
            this.disconnectRequired = true;
        }
        else {
            this.redis = new ioredis_1.default(redisOrOptions);
            this.disconnectRequired = true;
        }
        this.scriptSrc = this.getScriptSrc();
    }
    getScriptSrc() {
        return `
      local totalHits = redis.call("INCR", KEYS[1])
      local timeToExpire = redis.call("PTTL", KEYS[1])
      if timeToExpire <= 0
        then
          redis.call("PEXPIRE", KEYS[1], tonumber(ARGV[1]))
          timeToExpire = tonumber(ARGV[1])
        end
      return { totalHits, timeToExpire }
    `
            .replace(/^\s+/gm, '')
            .trim();
    }
    async increment(key, ttl) {
        const results = (await this.redis.call('EVAL', this.scriptSrc, 1, key, ttl * 1000));
        if (!Array.isArray(results)) {
            throw new TypeError(`Expected result to be array of values, got ${results}`);
        }
        if (results.length !== 2) {
            throw new Error(`Expected 2 values, got ${results.length}`);
        }
        const [totalHits, timeToExpire] = results;
        if (typeof totalHits !== 'number') {
            throw new TypeError('Expected totalHits to be a number');
        }
        if (typeof timeToExpire !== 'number') {
            throw new TypeError('Expected timeToExpire to be a number');
        }
        return {
            totalHits,
            timeToExpire: Math.ceil(timeToExpire / 1000),
        };
    }
    onModuleDestroy() {
        var _a;
        if (this.disconnectRequired) {
            (_a = this.redis) === null || _a === void 0 ? void 0 : _a.disconnect(false);
        }
    }
};
ThrottlerStorageRedisService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object])
], ThrottlerStorageRedisService);
exports.ThrottlerStorageRedisService = ThrottlerStorageRedisService;
//# sourceMappingURL=throttler-storage-redis.service.js.map