import{ca as a}from"./entry.51f4e399.js";const l=s=>/^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})$/i.test(s),d={validator:(s,e)=>new Promise((t,o)=>{const{t:r}=a().global;if(!e)return o(new Error(r("msg.error.tableNameRequired")));const n=e.match(/[./\\]/g);return n?o(new Error(`${r("msg.error.followingCharactersAreNotAllowed")} ${n.map(i=>JSON.stringify(i)).join(", ")}`)):t(!0)})},c={validator:(s,e)=>{const{t}=a().global;return new Promise((o,r)=>{(e==null?void 0:e.length)>50&&r(new Error(t("msg.error.projectNameExceeds50Characters"))),e[0]===" "&&r(new Error(t("msg.error.projectNameCannotStartWithSpace"))),o(!0)})}},g=()=>{const{t:s}=a().global;return{required:!0,message:s("msg.error.requiredField")}},u=s=>({validator:(e,t)=>{const{t:o}=a().global;let r=255;return s==="mysql2"||s==="mysql"?r=64:s==="pg"?r=59:s==="mssql"&&(r=128),new Promise((n,i)=>{(t==null?void 0:t.length)>r&&i(new Error(o("msg.error.columnNameExceedsCharacters",{value:r}))),n(!0)})}}),f={validator:(s,e)=>new Promise((t,o)=>{const{t:r}=a().global;return/(10)(\.([2]([0-5][0-5]|[01234][6-9])|[1][0-9][0-9]|[1-9][0-9]|[0-9])){3}|(172)\.(1[6-9]|2[0-9]|3[0-1])(\.(2[0-4][0-9]|25[0-5]|[1][0-9][0-9]|[1-9][0-9]|[0-9])){2}|(192)\.(168)(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){2}|(0.0.0.0)|localhost?/g.test(e)?o(new Error(r("msg.error.ipNotAllowed"))):t(!0)})},w={validator:(s,e)=>new Promise((t,o)=>{const{t:r}=a().global;return e&&!/.*\.(csv)/.test(e)?o(new Error(`${r("msg.error.targetFileIsNotAnAcceptedFileType")}. ${r("msg.error.theAcceptedFileTypeIsCsv")}`)):t(!0)})},p={validator:(s,e)=>new Promise((t,o)=>{const{t:r}=a().global;return e&&!/.*\.(xls|xlsx|xlsm|ods|ots)/.test(e)?o(new Error(`${r("msg.error.targetFileIsNotAnAcceptedFileType")}. ${r("msg.error.theAcceptedFileTypesAreXlsXlsxXlsmOdsOts")}`)):t(!0)})},E={validator:(s,e)=>new Promise((t,o)=>{const{t:r}=a().global;for(const n of e){if(n.key==="")return o(new Error(r("msg.error.parameterKeyCannotBeEmpty")));if(e.filter(i=>i.key===n.key).length!==1)return o(new Error(r("msg.error.duplicateParameterKeysAreNotAllowed")))}return t(!0)})},h={validator:(s,e)=>new Promise((t,o)=>{if(!e||e.length===0)return o(new Error("Email is required"));const r=(e||"").split(/\s*,\s*/).filter(n=>!l(n));return r.length>0?o(new Error(`${r.length>1?" Invalid emails:":"Invalid email:"} ${r.join(", ")} `)):t(!0)})};export{w as a,p as b,d as c,u as d,E as e,g as f,h as g,f as i,c as p,l as v};
