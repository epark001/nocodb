"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migration = exports.migrate = void 0;
var client_1 = require("@clickhouse/client");
var commander_1 = require("commander");
var fs_1 = __importDefault(require("fs"));
var crypto_1 = __importDefault(require("crypto"));
var sql_parse_1 = require("./sql-parse");
var log = function (type, message, error) {
    if (type === void 0) { type = 'info'; }
    if (type === 'info') {
        console.log('\x1b[36m', "clickhouse-migrations :", '\x1b[0m', message);
    }
    else {
        console.error('\x1b[36m', "clickhouse-migrations :", '\x1b[31m', "Error: ".concat(message), error ? "\n\n ".concat(error) : '');
    }
};
var connect = function (host, username, password, db_name) {
    var db_params = {
        host: host,
        username: username,
        password: password,
        application: 'clickhouse-migrations',
    };
    if (db_name) {
        db_params.database = db_name;
    }
    return (0, client_1.createClient)(db_params);
};
var create_db = function (host, username, password, db_name) { return __awaiter(void 0, void 0, void 0, function () {
    var client, q, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                client = connect(host, username, password);
                q = "CREATE DATABASE IF NOT EXISTS ".concat(db_name, " ENGINE = Atomic");
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, client.exec({
                        query: q,
                        clickhouse_settings: {
                            wait_end_of_query: 1,
                        },
                    })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                e_1 = _a.sent();
                log('error', "can't create the database ".concat(db_name, "."), e_1.message);
                process.exit(1);
                return [3 /*break*/, 4];
            case 4: return [4 /*yield*/, client.close()];
            case 5:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var init_migration_table = function (client) { return __awaiter(void 0, void 0, void 0, function () {
    var q, e_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                q = "CREATE TABLE IF NOT EXISTS _migrations (\n      uid UUID DEFAULT generateUUIDv4(), \n      version UInt32,\n      checksum String, \n      migration_name String, \n      applied_at DateTime DEFAULT now()\n    ) \n    ENGINE = MergeTree \n    ORDER BY tuple(applied_at)";
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, client.exec({
                        query: q,
                        clickhouse_settings: {
                            wait_end_of_query: 1,
                        },
                    })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                e_2 = _a.sent();
                log('error', "can't create the _migrations table.", e_2.message);
                process.exit(1);
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); };
var get_migrations = function (migrations_home) {
    var files;
    try {
        files = fs_1.default.readdirSync(migrations_home);
    }
    catch (e) {
        log('error', "no migration directory ".concat(migrations_home, ". Please create it."));
        process.exit(1);
    }
    var migrations = [];
    files.forEach(function (file) {
        var version = Number(file.split('_')[0]);
        if (!version) {
            log('error', "a migration name should start from number, example: 1_init.sql. Please check, if the migration ".concat(file, " is named correctly"));
            process.exit(1);
        }
        // Manage only .sql files.
        if (!file.endsWith('.sql'))
            return;
        migrations.push({
            version: version,
            file: file,
        });
    });
    if (!migrations) {
        log('error', "no migrations in the ".concat(migrations_home, " migrations directory"));
    }
    // Order by version.
    migrations.sort(function (m1, m2) { return m1.version - m2.version; });
    return migrations;
};
var apply_migrations = function (client, migrations, migrations_home) { return __awaiter(void 0, void 0, void 0, function () {
    var migration_query_result, resultSet, e_3, migrations_applied, applied_migrations, _i, migrations_1, migration_1, content, checksum, queries, sets, _a, queries_1, query, e_4, e_5;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                migration_query_result = [];
                _b.label = 1;
            case 1:
                _b.trys.push([1, 4, , 5]);
                return [4 /*yield*/, client.query({
                        query: "SELECT version, checksum, migration_name FROM _migrations ORDER BY version",
                        format: 'JSONEachRow',
                    })];
            case 2:
                resultSet = _b.sent();
                return [4 /*yield*/, resultSet.json()];
            case 3:
                migration_query_result = _b.sent();
                return [3 /*break*/, 5];
            case 4:
                e_3 = _b.sent();
                log('error', "can't select data from the _migrations table.", e_3.message);
                process.exit(1);
                return [3 /*break*/, 5];
            case 5:
                migrations_applied = [];
                migration_query_result.forEach(function (row) {
                    migrations_applied[row.version] = {
                        version: row.version,
                        checksum: row.checksum,
                        migration_name: row.migration_name,
                    };
                    // Check if migration file was not removed after apply.
                    var migration_exist = migrations.find(function (_a) {
                        var version = _a.version;
                        return version === row.version;
                    });
                    if (!migration_exist) {
                        log('error', "a migration file shouldn't be removed after apply. Please, restore the migration ".concat(row.migration_name, "."));
                        process.exit(1);
                    }
                });
                applied_migrations = '';
                _i = 0, migrations_1 = migrations;
                _b.label = 6;
            case 6:
                if (!(_i < migrations_1.length)) return [3 /*break*/, 17];
                migration_1 = migrations_1[_i];
                content = fs_1.default.readFileSync(migrations_home + '/' + migration_1.file).toString();
                checksum = crypto_1.default.createHash('md5').update(content).digest('hex');
                if (migrations_applied[migration_1.version]) {
                    // Check if migration file was not changed after apply.
                    if (migrations_applied[migration_1.version].checksum !== checksum) {
                        log('error', "a migration file should't be changed after apply. Please, restore content of the ".concat(migrations_applied[migration_1.version].migration_name, " migrations."));
                        process.exit(1);
                    }
                    // Skip if a migration is already applied.
                    return [3 /*break*/, 16];
                }
                queries = (0, sql_parse_1.sql_queries)(content);
                sets = (0, sql_parse_1.sql_sets)(content);
                _a = 0, queries_1 = queries;
                _b.label = 7;
            case 7:
                if (!(_a < queries_1.length)) return [3 /*break*/, 12];
                query = queries_1[_a];
                _b.label = 8;
            case 8:
                _b.trys.push([8, 10, , 11]);
                return [4 /*yield*/, client.exec({
                        query: query,
                        clickhouse_settings: sets,
                    })];
            case 9:
                _b.sent();
                return [3 /*break*/, 11];
            case 10:
                e_4 = _b.sent();
                if (applied_migrations) {
                    log('info', "The migration(s) ".concat(applied_migrations, " was successfully applied!"));
                }
                log('error', "the migrations ".concat(migration_1.file, " has an error. Please, fix it (be sure that already executed parts of the migration would not be run second time) and re-run migration script."), e_4.message);
                process.exit(1);
                return [3 /*break*/, 11];
            case 11:
                _a++;
                return [3 /*break*/, 7];
            case 12:
                _b.trys.push([12, 14, , 15]);
                return [4 /*yield*/, client.insert({
                        table: '_migrations',
                        values: [{ version: migration_1.version, checksum: checksum, migration_name: migration_1.file }],
                        format: 'JSONEachRow',
                    })];
            case 13:
                _b.sent();
                return [3 /*break*/, 15];
            case 14:
                e_5 = _b.sent();
                log('error', "can't insert a data into the table _migrations.", e_5.message);
                process.exit(1);
                return [3 /*break*/, 15];
            case 15:
                applied_migrations = applied_migrations ? applied_migrations + ', ' + migration_1.file : migration_1.file;
                _b.label = 16;
            case 16:
                _i++;
                return [3 /*break*/, 6];
            case 17:
                if (applied_migrations) {
                    log('info', "The migration(s) ".concat(applied_migrations, " was successfully applied!"));
                }
                else {
                    log('info', "No migrations to apply.");
                }
                return [2 /*return*/];
        }
    });
}); };
var migration = function (migrations_home, host, username, password, db_name) { return __awaiter(void 0, void 0, void 0, function () {
    var migrations, client;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                migrations = get_migrations(migrations_home);
                return [4 /*yield*/, create_db(host, username, password, db_name)];
            case 1:
                _a.sent();
                client = connect(host, username, password, db_name);
                return [4 /*yield*/, init_migration_table(client)];
            case 2:
                _a.sent();
                return [4 /*yield*/, apply_migrations(client, migrations, migrations_home)];
            case 3:
                _a.sent();
                return [4 /*yield*/, client.close()];
            case 4:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.migration = migration;
var migrate = function () {
    var program = new commander_1.Command();
    program.name('clickhouse-migrations').description('ClickHouse migrations.').version('0.1.13');
    program
        .command('migrate')
        .description('Apply migrations.')
        .requiredOption('--host <name>', 'Clickhouse hostname (ex: http://clickhouse:8123)', process.env.CH_MIGRATIONS_HOST)
        .requiredOption('--user <name>', 'Username', process.env.CH_MIGRATIONS_USER)
        .requiredOption('--password <password>', 'Password', process.env.CH_MIGRATIONS_PASSWORD)
        .requiredOption('--db <name>', 'Database name', process.env.CH_MIGRATIONS_DB)
        .requiredOption('--migrations-home <dir>', "Migrations' directory", process.env.CH_MIGRATIONS_HOME)
        .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, migration(options.migrationsHome, options.host, options.user, options.password, options.db)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    program.parse();
};
exports.migrate = migrate;
