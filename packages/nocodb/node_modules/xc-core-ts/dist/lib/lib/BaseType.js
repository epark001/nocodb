"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseType = void 0;
var auto_bind_1 = require("auto-bind");
var BaseType = /** @class */ (function () {
    function BaseType() {
        auto_bind_1.default(this);
    }
    BaseType.applyMiddlewareForLoader = function (handlers, loader, postHandlers) {
        var _this = this;
        if (handlers === void 0) { handlers = []; }
        if (postHandlers === void 0) { postHandlers = []; }
        if (!handlers) {
            return loader;
        }
        return function (args) { return __awaiter(_this, void 0, void 0, function () {
            var _i, handlers_1, handler, result, _a, postHandlers_1, handler, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 10, , 11]);
                        _i = 0, handlers_1 = handlers;
                        _b.label = 1;
                    case 1:
                        if (!(_i < handlers_1.length)) return [3 /*break*/, 4];
                        handler = handlers_1[_i];
                        return [4 /*yield*/, handler(args[0][1], args[0][2], args[0][3], args.map(function (_a) {
                                var id = _a[0];
                                return id;
                            }))];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, loader(args.map(function (_a) {
                            var id = _a[0];
                            return id;
                        }))];
                    case 5:
                        result = _b.sent();
                        if (!postHandlers) return [3 /*break*/, 9];
                        _a = 0, postHandlers_1 = postHandlers;
                        _b.label = 6;
                    case 6:
                        if (!(_a < postHandlers_1.length)) return [3 /*break*/, 9];
                        handler = postHandlers_1[_a];
                        return [4 /*yield*/, handler.apply(void 0, __spreadArrays([result], args[0]))];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8:
                        _a++;
                        return [3 /*break*/, 6];
                    case 9: return [2 /*return*/, result];
                    case 10:
                        e_1 = _b.sent();
                        throw e_1;
                    case 11: return [2 /*return*/];
                }
            });
        }); };
    };
    BaseType.prototype.applyMiddlewares = function (handlers, loaders, postHandlers) {
        var _this = this;
        if (handlers === void 0) { handlers = []; }
        if (loaders === void 0) { loaders = {}; }
        if (postHandlers === void 0) { postHandlers = []; }
        // return if there is no middlewares
        if (!handlers) {
            return loaders;
        }
        var _loop_1 = function (name, loader) {
            // wrap the loader function
            loaders[name] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(_this, void 0, void 0, function () {
                    var _a, handlers_2, handler, result, _b, postHandlers_2, handler, e_2;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _c.trys.push([0, 10, , 11]);
                                _a = 0, handlers_2 = handlers;
                                _c.label = 1;
                            case 1:
                                if (!(_a < handlers_2.length)) return [3 /*break*/, 4];
                                handler = handlers_2[_a];
                                return [4 /*yield*/, handler.apply(void 0, args)];
                            case 2:
                                _c.sent();
                                _c.label = 3;
                            case 3:
                                _a++;
                                return [3 /*break*/, 1];
                            case 4: return [4 /*yield*/, loader(args[0])
                                // post handlers
                            ];
                            case 5:
                                result = _c.sent();
                                if (!postHandlers) return [3 /*break*/, 9];
                                _b = 0, postHandlers_2 = postHandlers;
                                _c.label = 6;
                            case 6:
                                if (!(_b < postHandlers_2.length)) return [3 /*break*/, 9];
                                handler = postHandlers_2[_b];
                                return [4 /*yield*/, handler.apply(void 0, __spreadArrays([result], args))];
                            case 7:
                                _c.sent();
                                _c.label = 8;
                            case 8:
                                _b++;
                                return [3 /*break*/, 6];
                            case 9: 
                            // return the result
                            return [2 /*return*/, result];
                            case 10:
                                e_2 = _c.sent();
                                throw e_2;
                            case 11: return [2 /*return*/];
                        }
                    });
                });
            };
        };
        // iterate over loaders
        for (var _i = 0, _a = Object.entries(loaders); _i < _a.length; _i++) {
            var _b = _a[_i], name = _b[0], loader = _b[1];
            _loop_1(name, loader);
        }
        return loaders;
    };
    return BaseType;
}());
exports.BaseType = BaseType;
//# sourceMappingURL=BaseType.js.map