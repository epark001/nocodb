"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConflictException = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ServiceUnavailableException = exports.NotFoundException = exports.InternalServerErrorException = exports.ForbiddenException = exports.BadRequestException = exports.NodeType = exports.KafkaVersionStatus = exports.ConfigurationState = exports.UserIdentityType = exports.ClusterState = exports.StorageMode = exports.EnhancedMonitoring = exports.ClientBroker = exports.BrokerAZDistribution = exports.ClusterType = exports.VpcConnectionState = void 0;
const KafkaServiceException_1 = require("./KafkaServiceException");
exports.VpcConnectionState = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DEACTIVATING: "DEACTIVATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
    REJECTED: "REJECTED",
    REJECTING: "REJECTING",
};
exports.ClusterType = {
    PROVISIONED: "PROVISIONED",
    SERVERLESS: "SERVERLESS",
};
exports.BrokerAZDistribution = {
    DEFAULT: "DEFAULT",
};
exports.ClientBroker = {
    PLAINTEXT: "PLAINTEXT",
    TLS: "TLS",
    TLS_PLAINTEXT: "TLS_PLAINTEXT",
};
exports.EnhancedMonitoring = {
    DEFAULT: "DEFAULT",
    PER_BROKER: "PER_BROKER",
    PER_TOPIC_PER_BROKER: "PER_TOPIC_PER_BROKER",
    PER_TOPIC_PER_PARTITION: "PER_TOPIC_PER_PARTITION",
};
exports.StorageMode = {
    LOCAL: "LOCAL",
    TIERED: "TIERED",
};
exports.ClusterState = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    HEALING: "HEALING",
    MAINTENANCE: "MAINTENANCE",
    REBOOTING_BROKER: "REBOOTING_BROKER",
    UPDATING: "UPDATING",
};
exports.UserIdentityType = {
    AWSACCOUNT: "AWSACCOUNT",
    AWSSERVICE: "AWSSERVICE",
};
exports.ConfigurationState = {
    ACTIVE: "ACTIVE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
};
exports.KafkaVersionStatus = {
    ACTIVE: "ACTIVE",
    DEPRECATED: "DEPRECATED",
};
exports.NodeType = {
    BROKER: "BROKER",
};
class BadRequestException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.BadRequestException = BadRequestException;
class ForbiddenException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.ForbiddenException = ForbiddenException;
class InternalServerErrorException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.InternalServerErrorException = InternalServerErrorException;
class NotFoundException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.NotFoundException = NotFoundException;
class ServiceUnavailableException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.ServiceUnavailableException = ServiceUnavailableException;
class TooManyRequestsException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
class UnauthorizedException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.UnauthorizedException = UnauthorizedException;
class ConflictException extends KafkaServiceException_1.KafkaServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.InvalidParameter = opts.InvalidParameter;
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
