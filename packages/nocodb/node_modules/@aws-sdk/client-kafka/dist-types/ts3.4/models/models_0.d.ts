import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { KafkaServiceException as __BaseException } from "./KafkaServiceException";
export interface ProvisionedThroughput {
  Enabled?: boolean;
  VolumeThroughput?: number;
}
export interface BrokerEBSVolumeInfo {
  KafkaBrokerNodeId: string | undefined;
  ProvisionedThroughput?: ProvisionedThroughput;
  VolumeSizeGB?: number;
}
export declare const VpcConnectionState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DEACTIVATING: "DEACTIVATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly INACTIVE: "INACTIVE";
  readonly REJECTED: "REJECTED";
  readonly REJECTING: "REJECTING";
};
export type VpcConnectionState =
  (typeof VpcConnectionState)[keyof typeof VpcConnectionState];
export interface ClientVpcConnection {
  Authentication?: string;
  CreationTime?: Date;
  State?: VpcConnectionState | string;
  VpcConnectionArn: string | undefined;
  Owner?: string;
}
export declare const ClusterType: {
  readonly PROVISIONED: "PROVISIONED";
  readonly SERVERLESS: "SERVERLESS";
};
export type ClusterType = (typeof ClusterType)[keyof typeof ClusterType];
export declare const BrokerAZDistribution: {
  readonly DEFAULT: "DEFAULT";
};
export type BrokerAZDistribution =
  (typeof BrokerAZDistribution)[keyof typeof BrokerAZDistribution];
export interface PublicAccess {
  Type?: string;
}
export interface VpcConnectivityIam {
  Enabled?: boolean;
}
export interface VpcConnectivityScram {
  Enabled?: boolean;
}
export interface VpcConnectivitySasl {
  Scram?: VpcConnectivityScram;
  Iam?: VpcConnectivityIam;
}
export interface VpcConnectivityTls {
  Enabled?: boolean;
}
export interface VpcConnectivityClientAuthentication {
  Sasl?: VpcConnectivitySasl;
  Tls?: VpcConnectivityTls;
}
export interface VpcConnectivity {
  ClientAuthentication?: VpcConnectivityClientAuthentication;
}
export interface ConnectivityInfo {
  PublicAccess?: PublicAccess;
  VpcConnectivity?: VpcConnectivity;
}
export interface EBSStorageInfo {
  ProvisionedThroughput?: ProvisionedThroughput;
  VolumeSize?: number;
}
export interface StorageInfo {
  EbsStorageInfo?: EBSStorageInfo;
}
export interface BrokerNodeGroupInfo {
  BrokerAZDistribution?: BrokerAZDistribution | string;
  ClientSubnets: string[] | undefined;
  InstanceType: string | undefined;
  SecurityGroups?: string[];
  StorageInfo?: StorageInfo;
  ConnectivityInfo?: ConnectivityInfo;
  ZoneIds?: string[];
}
export interface Iam {
  Enabled?: boolean;
}
export interface Scram {
  Enabled?: boolean;
}
export interface Sasl {
  Scram?: Scram;
  Iam?: Iam;
}
export interface Tls {
  CertificateAuthorityArnList?: string[];
  Enabled?: boolean;
}
export interface Unauthenticated {
  Enabled?: boolean;
}
export interface ClientAuthentication {
  Sasl?: Sasl;
  Tls?: Tls;
  Unauthenticated?: Unauthenticated;
}
export interface BrokerSoftwareInfo {
  ConfigurationArn?: string;
  ConfigurationRevision?: number;
  KafkaVersion?: string;
}
export interface EncryptionAtRest {
  DataVolumeKMSKeyId: string | undefined;
}
export declare const ClientBroker: {
  readonly PLAINTEXT: "PLAINTEXT";
  readonly TLS: "TLS";
  readonly TLS_PLAINTEXT: "TLS_PLAINTEXT";
};
export type ClientBroker = (typeof ClientBroker)[keyof typeof ClientBroker];
export interface EncryptionInTransit {
  ClientBroker?: ClientBroker | string;
  InCluster?: boolean;
}
export interface EncryptionInfo {
  EncryptionAtRest?: EncryptionAtRest;
  EncryptionInTransit?: EncryptionInTransit;
}
export declare const EnhancedMonitoring: {
  readonly DEFAULT: "DEFAULT";
  readonly PER_BROKER: "PER_BROKER";
  readonly PER_TOPIC_PER_BROKER: "PER_TOPIC_PER_BROKER";
  readonly PER_TOPIC_PER_PARTITION: "PER_TOPIC_PER_PARTITION";
};
export type EnhancedMonitoring =
  (typeof EnhancedMonitoring)[keyof typeof EnhancedMonitoring];
export interface CloudWatchLogs {
  Enabled: boolean | undefined;
  LogGroup?: string;
}
export interface Firehose {
  DeliveryStream?: string;
  Enabled: boolean | undefined;
}
export interface S3 {
  Bucket?: string;
  Enabled: boolean | undefined;
  Prefix?: string;
}
export interface BrokerLogs {
  CloudWatchLogs?: CloudWatchLogs;
  Firehose?: Firehose;
  S3?: S3;
}
export interface LoggingInfo {
  BrokerLogs: BrokerLogs | undefined;
}
export interface JmxExporterInfo {
  EnabledInBroker: boolean | undefined;
}
export interface NodeExporterInfo {
  EnabledInBroker: boolean | undefined;
}
export interface PrometheusInfo {
  JmxExporter?: JmxExporterInfo;
  NodeExporter?: NodeExporterInfo;
}
export interface OpenMonitoringInfo {
  Prometheus: PrometheusInfo | undefined;
}
export declare const StorageMode: {
  readonly LOCAL: "LOCAL";
  readonly TIERED: "TIERED";
};
export type StorageMode = (typeof StorageMode)[keyof typeof StorageMode];
export interface Provisioned {
  BrokerNodeGroupInfo: BrokerNodeGroupInfo | undefined;
  CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
  ClientAuthentication?: ClientAuthentication;
  EncryptionInfo?: EncryptionInfo;
  EnhancedMonitoring?: EnhancedMonitoring | string;
  OpenMonitoring?: OpenMonitoringInfo;
  LoggingInfo?: LoggingInfo;
  NumberOfBrokerNodes: number | undefined;
  ZookeeperConnectString?: string;
  ZookeeperConnectStringTls?: string;
  StorageMode?: StorageMode | string;
}
export interface ServerlessSasl {
  Iam?: Iam;
}
export interface ServerlessClientAuthentication {
  Sasl?: ServerlessSasl;
}
export interface VpcConfig {
  SubnetIds: string[] | undefined;
  SecurityGroupIds?: string[];
}
export interface Serverless {
  VpcConfigs: VpcConfig[] | undefined;
  ClientAuthentication?: ServerlessClientAuthentication;
}
export declare const ClusterState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly HEALING: "HEALING";
  readonly MAINTENANCE: "MAINTENANCE";
  readonly REBOOTING_BROKER: "REBOOTING_BROKER";
  readonly UPDATING: "UPDATING";
};
export type ClusterState = (typeof ClusterState)[keyof typeof ClusterState];
export interface StateInfo {
  Code?: string;
  Message?: string;
}
export interface Cluster {
  ActiveOperationArn?: string;
  ClusterType?: ClusterType | string;
  ClusterArn?: string;
  ClusterName?: string;
  CreationTime?: Date;
  CurrentVersion?: string;
  State?: ClusterState | string;
  StateInfo?: StateInfo;
  Tags?: Record<string, string>;
  Provisioned?: Provisioned;
  Serverless?: Serverless;
}
export interface JmxExporter {
  EnabledInBroker: boolean | undefined;
}
export interface NodeExporter {
  EnabledInBroker: boolean | undefined;
}
export interface Prometheus {
  JmxExporter?: JmxExporter;
  NodeExporter?: NodeExporter;
}
export interface OpenMonitoring {
  Prometheus: Prometheus | undefined;
}
export interface ClusterInfo {
  ActiveOperationArn?: string;
  BrokerNodeGroupInfo?: BrokerNodeGroupInfo;
  ClientAuthentication?: ClientAuthentication;
  ClusterArn?: string;
  ClusterName?: string;
  CreationTime?: Date;
  CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
  CurrentVersion?: string;
  EncryptionInfo?: EncryptionInfo;
  EnhancedMonitoring?: EnhancedMonitoring | string;
  OpenMonitoring?: OpenMonitoring;
  LoggingInfo?: LoggingInfo;
  NumberOfBrokerNodes?: number;
  State?: ClusterState | string;
  StateInfo?: StateInfo;
  Tags?: Record<string, string>;
  ZookeeperConnectString?: string;
  ZookeeperConnectStringTls?: string;
  StorageMode?: StorageMode | string;
}
export interface ErrorInfo {
  ErrorCode?: string;
  ErrorString?: string;
}
export interface ClusterOperationStepInfo {
  StepStatus?: string;
}
export interface ClusterOperationStep {
  StepInfo?: ClusterOperationStepInfo;
  StepName?: string;
}
export interface ConfigurationInfo {
  Arn: string | undefined;
  Revision: number | undefined;
}
export interface MutableClusterInfo {
  BrokerEBSVolumeInfo?: BrokerEBSVolumeInfo[];
  ConfigurationInfo?: ConfigurationInfo;
  NumberOfBrokerNodes?: number;
  EnhancedMonitoring?: EnhancedMonitoring | string;
  OpenMonitoring?: OpenMonitoring;
  KafkaVersion?: string;
  LoggingInfo?: LoggingInfo;
  InstanceType?: string;
  ClientAuthentication?: ClientAuthentication;
  EncryptionInfo?: EncryptionInfo;
  ConnectivityInfo?: ConnectivityInfo;
  StorageMode?: StorageMode | string;
}
export declare const UserIdentityType: {
  readonly AWSACCOUNT: "AWSACCOUNT";
  readonly AWSSERVICE: "AWSSERVICE";
};
export type UserIdentityType =
  (typeof UserIdentityType)[keyof typeof UserIdentityType];
export interface UserIdentity {
  Type?: UserIdentityType | string;
  PrincipalId?: string;
}
export interface VpcConnectionInfo {
  VpcConnectionArn?: string;
  Owner?: string;
  UserIdentity?: UserIdentity;
  CreationTime?: Date;
}
export interface ClusterOperationInfo {
  ClientRequestId?: string;
  ClusterArn?: string;
  CreationTime?: Date;
  EndTime?: Date;
  ErrorInfo?: ErrorInfo;
  OperationArn?: string;
  OperationState?: string;
  OperationSteps?: ClusterOperationStep[];
  OperationType?: string;
  SourceClusterInfo?: MutableClusterInfo;
  TargetClusterInfo?: MutableClusterInfo;
  VpcConnectionInfo?: VpcConnectionInfo;
}
export interface ClusterOperationV2Summary {
  ClusterArn?: string;
  ClusterType?: ClusterType | string;
  StartTime?: Date;
  EndTime?: Date;
  OperationArn?: string;
  OperationState?: string;
  OperationType?: string;
}
export interface CompatibleKafkaVersion {
  SourceVersion?: string;
  TargetVersions?: string[];
}
export interface ConfigurationRevision {
  CreationTime: Date | undefined;
  Description?: string;
  Revision: number | undefined;
}
export declare const ConfigurationState: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
};
export type ConfigurationState =
  (typeof ConfigurationState)[keyof typeof ConfigurationState];
export interface Configuration {
  Arn: string | undefined;
  CreationTime: Date | undefined;
  Description: string | undefined;
  KafkaVersions: string[] | undefined;
  LatestRevision: ConfigurationRevision | undefined;
  Name: string | undefined;
  State: ConfigurationState | string | undefined;
}
export declare const KafkaVersionStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DEPRECATED: "DEPRECATED";
};
export type KafkaVersionStatus =
  (typeof KafkaVersionStatus)[keyof typeof KafkaVersionStatus];
export interface KafkaVersion {
  Version?: string;
  Status?: KafkaVersionStatus | string;
}
export interface BrokerNodeInfo {
  AttachedENIId?: string;
  BrokerId?: number;
  ClientSubnet?: string;
  ClientVpcIpAddress?: string;
  CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
  Endpoints?: string[];
}
export declare const NodeType: {
  readonly BROKER: "BROKER";
};
export type NodeType = (typeof NodeType)[keyof typeof NodeType];
export interface ZookeeperNodeInfo {
  AttachedENIId?: string;
  ClientVpcIpAddress?: string;
  Endpoints?: string[];
  ZookeeperId?: number;
  ZookeeperVersion?: string;
}
export interface NodeInfo {
  AddedToClusterTime?: string;
  BrokerNodeInfo?: BrokerNodeInfo;
  InstanceType?: string;
  NodeARN?: string;
  NodeType?: NodeType | string;
  ZookeeperNodeInfo?: ZookeeperNodeInfo;
}
export interface UnprocessedScramSecret {
  ErrorCode?: string;
  ErrorMessage?: string;
  SecretArn?: string;
}
export interface VpcConnection {
  VpcConnectionArn: string | undefined;
  TargetClusterArn: string | undefined;
  CreationTime?: Date;
  Authentication?: string;
  VpcId?: string;
  State?: VpcConnectionState | string;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  InvalidParameter?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export interface BatchAssociateScramSecretRequest {
  ClusterArn: string | undefined;
  SecretArnList: string[] | undefined;
}
export interface BatchAssociateScramSecretResponse {
  ClusterArn?: string;
  UnprocessedScramSecrets?: UnprocessedScramSecret[];
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  InvalidParameter?: string;
  Message?: string;
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  InvalidParameter?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  InvalidParameter?: string;
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  InvalidParameter?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  InvalidParameter?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  InvalidParameter?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface BatchDisassociateScramSecretRequest {
  ClusterArn: string | undefined;
  SecretArnList: string[] | undefined;
}
export interface BatchDisassociateScramSecretResponse {
  ClusterArn?: string;
  UnprocessedScramSecrets?: UnprocessedScramSecret[];
}
export interface ClusterOperationV2Provisioned {
  OperationSteps?: ClusterOperationStep[];
  SourceClusterInfo?: MutableClusterInfo;
  TargetClusterInfo?: MutableClusterInfo;
  VpcConnectionInfo?: VpcConnectionInfo;
}
export interface VpcConnectionInfoServerless {
  CreationTime?: Date;
  Owner?: string;
  UserIdentity?: UserIdentity;
  VpcConnectionArn?: string;
}
export interface ClusterOperationV2Serverless {
  VpcConnectionInfo?: VpcConnectionInfoServerless;
}
export interface ClusterOperationV2 {
  ClusterArn?: string;
  ClusterType?: ClusterType | string;
  StartTime?: Date;
  EndTime?: Date;
  ErrorInfo?: ErrorInfo;
  OperationArn?: string;
  OperationState?: string;
  OperationType?: string;
  Provisioned?: ClusterOperationV2Provisioned;
  Serverless?: ClusterOperationV2Serverless;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  InvalidParameter?: string;
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateClusterRequest {
  BrokerNodeGroupInfo: BrokerNodeGroupInfo | undefined;
  ClientAuthentication?: ClientAuthentication;
  ClusterName: string | undefined;
  ConfigurationInfo?: ConfigurationInfo;
  EncryptionInfo?: EncryptionInfo;
  EnhancedMonitoring?: EnhancedMonitoring | string;
  OpenMonitoring?: OpenMonitoringInfo;
  KafkaVersion: string | undefined;
  LoggingInfo?: LoggingInfo;
  NumberOfBrokerNodes: number | undefined;
  Tags?: Record<string, string>;
  StorageMode?: StorageMode | string;
}
export interface CreateClusterResponse {
  ClusterArn?: string;
  ClusterName?: string;
  State?: ClusterState | string;
}
export interface ProvisionedRequest {
  BrokerNodeGroupInfo: BrokerNodeGroupInfo | undefined;
  ClientAuthentication?: ClientAuthentication;
  ConfigurationInfo?: ConfigurationInfo;
  EncryptionInfo?: EncryptionInfo;
  EnhancedMonitoring?: EnhancedMonitoring | string;
  OpenMonitoring?: OpenMonitoringInfo;
  KafkaVersion: string | undefined;
  LoggingInfo?: LoggingInfo;
  NumberOfBrokerNodes: number | undefined;
  StorageMode?: StorageMode | string;
}
export interface ServerlessRequest {
  VpcConfigs: VpcConfig[] | undefined;
  ClientAuthentication?: ServerlessClientAuthentication;
}
export interface CreateClusterV2Request {
  ClusterName: string | undefined;
  Tags?: Record<string, string>;
  Provisioned?: ProvisionedRequest;
  Serverless?: ServerlessRequest;
}
export interface CreateClusterV2Response {
  ClusterArn?: string;
  ClusterName?: string;
  State?: ClusterState | string;
  ClusterType?: ClusterType | string;
}
export interface CreateConfigurationRequest {
  Description?: string;
  KafkaVersions?: string[];
  Name: string | undefined;
  ServerProperties: Uint8Array | undefined;
}
export interface CreateConfigurationResponse {
  Arn?: string;
  CreationTime?: Date;
  LatestRevision?: ConfigurationRevision;
  Name?: string;
  State?: ConfigurationState | string;
}
export interface CreateVpcConnectionRequest {
  TargetClusterArn: string | undefined;
  Authentication: string | undefined;
  VpcId: string | undefined;
  ClientSubnets: string[] | undefined;
  SecurityGroups: string[] | undefined;
  Tags?: Record<string, string>;
}
export interface CreateVpcConnectionResponse {
  VpcConnectionArn?: string;
  State?: VpcConnectionState | string;
  Authentication?: string;
  VpcId?: string;
  ClientSubnets?: string[];
  SecurityGroups?: string[];
  CreationTime?: Date;
  Tags?: Record<string, string>;
}
export interface DeleteClusterRequest {
  ClusterArn: string | undefined;
  CurrentVersion?: string;
}
export interface DeleteClusterResponse {
  ClusterArn?: string;
  State?: ClusterState | string;
}
export interface DeleteClusterPolicyRequest {
  ClusterArn: string | undefined;
}
export interface DeleteClusterPolicyResponse {}
export interface DeleteConfigurationRequest {
  Arn: string | undefined;
}
export interface DeleteConfigurationResponse {
  Arn?: string;
  State?: ConfigurationState | string;
}
export interface DeleteVpcConnectionRequest {
  Arn: string | undefined;
}
export interface DeleteVpcConnectionResponse {
  VpcConnectionArn?: string;
  State?: VpcConnectionState | string;
}
export interface DescribeClusterRequest {
  ClusterArn: string | undefined;
}
export interface DescribeClusterResponse {
  ClusterInfo?: ClusterInfo;
}
export interface DescribeClusterOperationRequest {
  ClusterOperationArn: string | undefined;
}
export interface DescribeClusterOperationResponse {
  ClusterOperationInfo?: ClusterOperationInfo;
}
export interface DescribeClusterOperationV2Request {
  ClusterOperationArn: string | undefined;
}
export interface DescribeClusterOperationV2Response {
  ClusterOperationInfo?: ClusterOperationV2;
}
export interface DescribeClusterV2Request {
  ClusterArn: string | undefined;
}
export interface DescribeClusterV2Response {
  ClusterInfo?: Cluster;
}
export interface DescribeConfigurationRequest {
  Arn: string | undefined;
}
export interface DescribeConfigurationResponse {
  Arn?: string;
  CreationTime?: Date;
  Description?: string;
  KafkaVersions?: string[];
  LatestRevision?: ConfigurationRevision;
  Name?: string;
  State?: ConfigurationState | string;
}
export interface DescribeConfigurationRevisionRequest {
  Arn: string | undefined;
  Revision: number | undefined;
}
export interface DescribeConfigurationRevisionResponse {
  Arn?: string;
  CreationTime?: Date;
  Description?: string;
  Revision?: number;
  ServerProperties?: Uint8Array;
}
export interface DescribeVpcConnectionRequest {
  Arn: string | undefined;
}
export interface DescribeVpcConnectionResponse {
  VpcConnectionArn?: string;
  TargetClusterArn?: string;
  State?: VpcConnectionState | string;
  Authentication?: string;
  VpcId?: string;
  Subnets?: string[];
  SecurityGroups?: string[];
  CreationTime?: Date;
  Tags?: Record<string, string>;
}
export interface GetBootstrapBrokersRequest {
  ClusterArn: string | undefined;
}
export interface GetBootstrapBrokersResponse {
  BootstrapBrokerString?: string;
  BootstrapBrokerStringTls?: string;
  BootstrapBrokerStringSaslScram?: string;
  BootstrapBrokerStringSaslIam?: string;
  BootstrapBrokerStringPublicTls?: string;
  BootstrapBrokerStringPublicSaslScram?: string;
  BootstrapBrokerStringPublicSaslIam?: string;
  BootstrapBrokerStringVpcConnectivityTls?: string;
  BootstrapBrokerStringVpcConnectivitySaslScram?: string;
  BootstrapBrokerStringVpcConnectivitySaslIam?: string;
}
export interface GetClusterPolicyRequest {
  ClusterArn: string | undefined;
}
export interface GetClusterPolicyResponse {
  CurrentVersion?: string;
  Policy?: string;
}
export interface GetCompatibleKafkaVersionsRequest {
  ClusterArn?: string;
}
export interface GetCompatibleKafkaVersionsResponse {
  CompatibleKafkaVersions?: CompatibleKafkaVersion[];
}
export interface ListClientVpcConnectionsRequest {
  ClusterArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListClientVpcConnectionsResponse {
  ClientVpcConnections?: ClientVpcConnection[];
  NextToken?: string;
}
export interface ListClusterOperationsRequest {
  ClusterArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListClusterOperationsResponse {
  ClusterOperationInfoList?: ClusterOperationInfo[];
  NextToken?: string;
}
export interface ListClusterOperationsV2Request {
  ClusterArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListClusterOperationsV2Response {
  ClusterOperationInfoList?: ClusterOperationV2Summary[];
  NextToken?: string;
}
export interface ListClustersRequest {
  ClusterNameFilter?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListClustersResponse {
  ClusterInfoList?: ClusterInfo[];
  NextToken?: string;
}
export interface ListClustersV2Request {
  ClusterNameFilter?: string;
  ClusterTypeFilter?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListClustersV2Response {
  ClusterInfoList?: Cluster[];
  NextToken?: string;
}
export interface ListConfigurationRevisionsRequest {
  Arn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListConfigurationRevisionsResponse {
  NextToken?: string;
  Revisions?: ConfigurationRevision[];
}
export interface ListConfigurationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListConfigurationsResponse {
  Configurations?: Configuration[];
  NextToken?: string;
}
export interface ListKafkaVersionsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListKafkaVersionsResponse {
  KafkaVersions?: KafkaVersion[];
  NextToken?: string;
}
export interface ListNodesRequest {
  ClusterArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListNodesResponse {
  NextToken?: string;
  NodeInfoList?: NodeInfo[];
}
export interface ListScramSecretsRequest {
  ClusterArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListScramSecretsResponse {
  NextToken?: string;
  SecretArnList?: string[];
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface ListVpcConnectionsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListVpcConnectionsResponse {
  VpcConnections?: VpcConnection[];
  NextToken?: string;
}
export interface PutClusterPolicyRequest {
  ClusterArn: string | undefined;
  CurrentVersion?: string;
  Policy: string | undefined;
}
export interface PutClusterPolicyResponse {
  CurrentVersion?: string;
}
export interface RebootBrokerRequest {
  BrokerIds: string[] | undefined;
  ClusterArn: string | undefined;
}
export interface RebootBrokerResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface RejectClientVpcConnectionRequest {
  ClusterArn: string | undefined;
  VpcConnectionArn: string | undefined;
}
export interface RejectClientVpcConnectionResponse {}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdateBrokerCountRequest {
  ClusterArn: string | undefined;
  CurrentVersion: string | undefined;
  TargetNumberOfBrokerNodes: number | undefined;
}
export interface UpdateBrokerCountResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateBrokerStorageRequest {
  ClusterArn: string | undefined;
  CurrentVersion: string | undefined;
  TargetBrokerEBSVolumeInfo: BrokerEBSVolumeInfo[] | undefined;
}
export interface UpdateBrokerStorageResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateBrokerTypeRequest {
  ClusterArn: string | undefined;
  CurrentVersion: string | undefined;
  TargetInstanceType: string | undefined;
}
export interface UpdateBrokerTypeResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateClusterConfigurationRequest {
  ClusterArn: string | undefined;
  ConfigurationInfo: ConfigurationInfo | undefined;
  CurrentVersion: string | undefined;
}
export interface UpdateClusterConfigurationResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateClusterKafkaVersionRequest {
  ClusterArn: string | undefined;
  ConfigurationInfo?: ConfigurationInfo;
  CurrentVersion: string | undefined;
  TargetKafkaVersion: string | undefined;
}
export interface UpdateClusterKafkaVersionResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateConfigurationRequest {
  Arn: string | undefined;
  Description?: string;
  ServerProperties: Uint8Array | undefined;
}
export interface UpdateConfigurationResponse {
  Arn?: string;
  LatestRevision?: ConfigurationRevision;
}
export interface UpdateConnectivityRequest {
  ClusterArn: string | undefined;
  ConnectivityInfo: ConnectivityInfo | undefined;
  CurrentVersion: string | undefined;
}
export interface UpdateConnectivityResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateMonitoringRequest {
  ClusterArn: string | undefined;
  CurrentVersion: string | undefined;
  EnhancedMonitoring?: EnhancedMonitoring | string;
  OpenMonitoring?: OpenMonitoringInfo;
  LoggingInfo?: LoggingInfo;
}
export interface UpdateMonitoringResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateSecurityRequest {
  ClientAuthentication?: ClientAuthentication;
  ClusterArn: string | undefined;
  CurrentVersion: string | undefined;
  EncryptionInfo?: EncryptionInfo;
}
export interface UpdateSecurityResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
export interface UpdateStorageRequest {
  ClusterArn: string | undefined;
  CurrentVersion: string | undefined;
  ProvisionedThroughput?: ProvisionedThroughput;
  StorageMode?: StorageMode | string;
  VolumeSizeGB?: number;
}
export interface UpdateStorageResponse {
  ClusterArn?: string;
  ClusterOperationArn?: string;
}
